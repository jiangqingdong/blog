import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as n,b as a,e as t,f as s}from"./app-18640bff.js";const c={},r=s('<h2 id="配置中心" tabindex="-1"><a class="header-anchor" href="#配置中心" aria-hidden="true">#</a> 配置中心</h2><p>在微服务架构中，当系统从一个单体应用，被拆分成分布式系统上一个个服务节点后，配置文件也必须跟着迁移（分割），这样配置就分散了，不仅如此，分散中还包含着冗余。配置中心将配置从各应用中剥离出来，对配置进行统一管理，应用自身不需要自己去管理配置。</p><figure><img src="https://img.jssjqd.cn/202304130403361.png" alt="image-20230413040338301" tabindex="0" loading="lazy"><figcaption>image-20230413040338301</figcaption></figure><p>配置中心的服务流程如下：</p><ol><li>用户在配置中心更新配置信息。</li><li>服务A和服务B及时得到配置更新通知，从配置中心获取配置。</li></ol><p>配置中心就是一种统一管理各种应用配置的基础服务组件。</p><h3 id="什么是nacos配置中心" tabindex="-1"><a class="header-anchor" href="#什么是nacos配置中心" aria-hidden="true">#</a> 什么是Nacos配置中心</h3>',7),u={href:"https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config",target:"_blank",rel:"noopener noreferrer"},m=s(`<p>Nacos 提供用于存储配置和其他元数据的 key/value 存储，为分布式系统中的外部化配置提供服务器端和客户端支持。使用 Spring Cloud Alibaba Nacos Config，您可以在 Nacos Server 集中管理你 Spring Cloud 应用的外部属性配置。</p><p>​ <img src="https://img.jssjqd.cn/202304130404369.png" alt="image-20230413040437405" loading="lazy"></p><h3 id="nacos配置中心的架构" tabindex="-1"><a class="header-anchor" href="#nacos配置中心的架构" aria-hidden="true">#</a> Nacos配置中心的架构</h3><p>​ <img src="https://img.jssjqd.cn/202304130404154.png" alt="image-20230413040449180" loading="lazy"></p><h4 id="nacos配置中心核心api" tabindex="-1"><a class="header-anchor" href="#nacos配置中心核心api" aria-hidden="true">#</a> Nacos配置中心核心API</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigServerDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> serverAddr <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> dataId <span class="token operator">=</span> <span class="token string">&quot;nacos-config-demo.yaml&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> group <span class="token operator">=</span> <span class="token string">&quot;DEFAULT_GROUP&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst</span><span class="token punctuation">.</span><span class="token constant">SERVER_ADDR</span><span class="token punctuation">,</span> serverAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取配置服务</span>
        <span class="token class-name">ConfigService</span> configService <span class="token operator">=</span> <span class="token class-name">NacosFactory</span><span class="token punctuation">.</span><span class="token function">createConfigService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取配置</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//注册监听器</span>
        configService<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveConfigInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===recieve:&quot;</span> <span class="token operator">+</span> configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//发布配置</span>
        <span class="token comment">//boolean isPublishOk = configService.publishConfig(dataId, group, &quot;content&quot;);</span>
        <span class="token comment">//System.out.println(isPublishOk);</span>
        <span class="token comment">//发送properties格式</span>
        configService<span class="token punctuation">.</span><span class="token function">publishConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span>group<span class="token punctuation">,</span><span class="token string">&quot;common.age=30&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ConfigType</span><span class="token punctuation">.</span><span class="token constant">PROPERTIES</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        content <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        boolean isRemoveOk = configService.removeConfig(dataId, group);</span>
<span class="token comment">//        System.out.println(isRemoveOk);</span>
<span class="token comment">//        Thread.sleep(3000);</span>

<span class="token comment">//        content = configService.getConfig(dataId, group, 5000);</span>
<span class="token comment">//        System.out.println(content);</span>
<span class="token comment">//        Thread.sleep(300000);</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-cloud-整合nacos配置中心快速开始" tabindex="-1"><a class="header-anchor" href="#spring-cloud-整合nacos配置中心快速开始" aria-hidden="true">#</a> Spring Cloud 整合Nacos配置中心快速开始</h3><h4 id="nacos-server配置中心中准备配置数据" tabindex="-1"><a class="header-anchor" href="#nacos-server配置中心中准备配置数据" aria-hidden="true">#</a> nacos server配置中心中准备配置数据</h4><p>nacos server中新建nacos-config.properties</p><figure><img src="https://img.jssjqd.cn/202304130406493.png" alt="image-20230413040614713" tabindex="0" loading="lazy"><figcaption>image-20230413040614713</figcaption></figure><p>​ <img src="https://img.jssjqd.cn/202304130406419.png" alt="image-20230413040619457" loading="lazy"></p><h4 id="微服务接入配置中心" tabindex="-1"><a class="header-anchor" href="#微服务接入配置中心" aria-hidden="true">#</a> 微服务接入配置中心</h4><p><strong>1）引入依赖</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2）添加bootstrap.properties</strong></p><p>注意：必须使用 bootstrap.properties 配置文件来配置Nacos Server 地址</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">nacos-config</span>
<span class="token comment"># 配置中心地址</span>
<span class="token key attr-name">spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:8848</span>

<span class="token comment"># dataid 为 yaml 的文件扩展名配置方式</span>
<span class="token key attr-name">spring.cloud.nacos.config.file-extension</span><span class="token punctuation">=</span><span class="token value attr-value">yaml</span>
<span class="token comment">#profile粒度的配置   \`\${spring.application.name}-\${profile}.\${file-extension:properties}\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),d=n("p",{"file-extension":""},[a("在 Nacos Spring Cloud 中，dataId 的完整格式如下："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mrow",null,[n("mi",null,"p"),n("mi",null,"r"),n("mi",null,"e"),n("mi",null,"f"),n("mi",null,"i"),n("mi",null,"x")]),n("mo",null,"−")]),n("annotation",{encoding:"application/x-tex"},"{prefix}-")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"re"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"x")]),n("span",{class:"mord"},"−")])])]),a("{spring.profiles.active}.$")],-1),k={href:"http://spring.application.name",target:"_blank",rel:"noopener noreferrer"},v={"file-extension":""},g={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles",target:"_blank",rel:"noopener noreferrer"},h=n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mrow",null,[n("mi",null,"p"),n("mi",null,"r"),n("mi",null,"e"),n("mi",null,"f"),n("mi",null,"i"),n("mi",null,"x")]),n("mi",{mathvariant:"normal"},".")]),n("annotation",{encoding:"application/x-tex"},"{prefix}.")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"re"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"x")]),n("span",{class:"mord"},".")])])],-1),b=n("li",null,"file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。",-1),f=s(`<p><strong>3) 启动服务，测试微服务是否使用配置中心的配置</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@SpringBootApplication
public class NacosConfigApplication {

    public static void main(String[] args) {
        ConfigurableApplicationContext applicationContext = SpringApplication.run(NacosConfigApplication.class, args);
        String userName = applicationContext.getEnvironment().getProperty(&quot;common.name&quot;);
        String userAge = applicationContext.getEnvironment().getProperty(&quot;common.age&quot;);
        System.out.println(&quot;common name :&quot;+userName+&quot;; age: &quot;+userAge);
    }
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img.jssjqd.cn/202304130408948.png" alt="image-20230413040809950" tabindex="0" loading="lazy"><figcaption>image-20230413040809950</figcaption></figure><h3 id="config相关配置" tabindex="-1"><a class="header-anchor" href="#config相关配置" aria-hidden="true">#</a> Config相关配置</h3><p>Nacos 数据模型 Key 由三元组唯一确定, Namespace默认是空串，公共命名空间（public），分组默认是 DEFAULT_GROUP</p><p>​ <img src="https://img.jssjqd.cn/202304130408166.png" alt="image-20230413040825067" loading="lazy"></p><ul><li><strong>支持配置的动态更新</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosConfigApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NacosConfigApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//当动态配置刷新时，会更新到 Enviroment中，因此这里每隔一秒中从Enviroment中获取配置</span>
         <span class="token class-name">String</span> userName <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;common.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> userAge <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;common.age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;common name :&quot;</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">&quot;; age: &quot;</span> <span class="token operator">+</span> userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>支持profile粒度的配置</strong></li></ul>`,9),x=n("p",null,[a("spring-cloud-starter-alibaba-nacos-config 在加载配置的时候，不"),n("strong",null,[a("仅仅加载了以 dataid 为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mrow",null,[n("mi",null,"s"),n("mi",null,"p"),n("mi",null,"r"),n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"g"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"a"),n("mi",null,"p"),n("mi",null,"p"),n("mi",null,"l"),n("mi",null,"i"),n("mi",null,"c"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"i"),n("mi",null,"o"),n("mi",null,"n"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"n"),n("mi",null,"a"),n("mi",null,"m"),n("mi",null,"e")]),n("mi",{mathvariant:"normal"},".")]),n("annotation",{encoding:"application/x-tex"},"{spring.application.name}.")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"ppl"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal"},"nam"),n("span",{class:"mord mathnormal"},"e")]),n("span",{class:"mord"},".")])])]),a("{file-extension:properties} 为前缀的基础配置，还加载了dataid为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mrow",null,[n("mi",null,"s"),n("mi",null,"p"),n("mi",null,"r"),n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"g"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"a"),n("mi",null,"p"),n("mi",null,"p"),n("mi",null,"l"),n("mi",null,"i"),n("mi",null,"c"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"i"),n("mi",null,"o"),n("mi",null,"n"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"n"),n("mi",null,"a"),n("mi",null,"m"),n("mi",null,"e")]),n("mo",null,"−")]),n("annotation",{encoding:"application/x-tex"},"{spring.application.name}-")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"ppl"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal"},"nam"),n("span",{class:"mord mathnormal"},"e")]),n("span",{class:"mord"},"−")])])]),a("{profile}.${file-extension:properties} 的基础配置")]),a("。在日常开发中如果遇到多套环境下的不同配置，可以通过Spring 提供的 ${spring.profiles.active} 这个配置项来配置。")],-1),y=s(`<div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token key attr-name">支持自定义</span> <span class="token value attr-value">namespace 的配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>支持自定义 namespace 的配置</strong></li></ul><p>用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</p><p>在没有明确指定 \${spring.cloud.nacos.config.namespace} 配置的情况下， 默认使用的是 Nacos 上 Public 这个namespace。如果需要使用自定义的命名空间，可以通过以下配置来实现：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token value attr-value">71bb9785-231f-4eca-b4dc-6be446e12ff8</span>
<span class="token key attr-name">支持自定义</span> <span class="token value attr-value">Group 的配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>支持自定义 Group 的配置</strong></li></ul><p>Group是组织配置的维度之一。通过一个有意义的字符串（如 Buy 或 Trade ）对配置集进行分组，从而区分 Data ID 相同的配置集。当您在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP 。配置分组的常见场景：不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置。</p><p>在没有明确指定 \${spring.cloud.nacos.config.group} 配置的情况下，默认是DEFAULT_GROUP 。如果需要自定义自己的 Group，可以通过以下配置来实现：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.nacos.config.group</span><span class="token punctuation">=</span><span class="token value attr-value">DEVELOP_GROUP</span>
<span class="token key attr-name">支持自定义扩展的</span> <span class="token value attr-value">Data Id 配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>支持自定义扩展的 Data Id 配置</strong></li></ul><p>Data ID 是组织划分配置的维度之一。Data ID 通常用于组织划分系统的配置集。一个系统或者应用可以包含多个配置集，每个配置集都可以被一个有意义的名称标识。Data ID 通常采用类 Java 包（如 com.taobao.tc.refund.log.level）的命名规则保证全局唯一性。此命名规则非强制。</p><p>通过自定义扩展的 Data Id 配置，既可以解决多个应用间配置共享的问题，又可以支持一个应用有多个配置文件。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 自定义 Data Id 的配置</span>
<span class="token comment">#不同工程的通用配置 支持共享的 DataId</span>
<span class="token key attr-name">spring.cloud.nacos.config.sharedConfigs[0].data-id</span><span class="token punctuation">=</span> <span class="token value attr-value">common.yaml</span>
<span class="token key attr-name">spring.cloud.nacos.config.sharedConfigs[0].group</span><span class="token punctuation">=</span><span class="token value attr-value">REFRESH_GROUP</span>
<span class="token key attr-name">spring.cloud.nacos.config.sharedConfigs[0].refresh</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment"># config external configuration</span>
<span class="token comment"># 支持一个应用多个 DataId 的配置</span>
<span class="token key attr-name">spring.cloud.nacos.config.extensionConfigs[0].data-id</span><span class="token punctuation">=</span><span class="token value attr-value">ext-config-common01.properties</span>
<span class="token key attr-name">spring.cloud.nacos.config.extensionConfigs[0].group</span><span class="token punctuation">=</span><span class="token value attr-value">REFRESH_GROUP</span>
<span class="token key attr-name">spring.cloud.nacos.config.extensionConfigs[0].refresh</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token key attr-name">spring.cloud.nacos.config.extensionConfigs[1].data-id</span><span class="token punctuation">=</span><span class="token value attr-value">ext-config-common02.properties</span>
<span class="token key attr-name">spring.cloud.nacos.config.extensionConfigs[1].group</span><span class="token punctuation">=</span><span class="token value attr-value">REFRESH_GROUP</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置的优先级" tabindex="-1"><a class="header-anchor" href="#配置的优先级" aria-hidden="true">#</a> 配置的优先级</h3><p>Spring Cloud Alibaba Nacos Config 目前提供了三种配置能力从 Nacos 拉取相关的配置。</p><ul><li>A: 通过 spring.cloud.nacos.config.shared-configs 支持多个共享 Data Id 的配置</li><li>B: 通过 spring.cloud.nacos.config.ext-config[n].data-id 的方式支持多个扩展 Data Id 的配置</li><li>C: 通过内部相关规则(应用名、应用名+ Profile )自动生成相关的 Data Id 配置</li></ul><p>当三种方式共同使用时，他们的一个优先级关系是:A &lt; B &lt; C</p><p>优先级从高到低：</p>`,18),S=n("ul",null,[n("li",{"file-extension:properties":""},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mrow",null,[n("mi",null,"s"),n("mi",null,"p"),n("mi",null,"r"),n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"g"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"a"),n("mi",null,"p"),n("mi",null,"p"),n("mi",null,"l"),n("mi",null,"i"),n("mi",null,"c"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"i"),n("mi",null,"o"),n("mi",null,"n"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"n"),n("mi",null,"a"),n("mi",null,"m"),n("mi",null,"e")]),n("mo",null,"−")]),n("annotation",{encoding:"application/x-tex"},"{spring.application.name}-")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"ppl"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal"},"nam"),n("span",{class:"mord mathnormal"},"e")]),n("span",{class:"mord"},"−")])])]),a("{profile}.$")]),n("li",{"file-extension:properties":""},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mrow",null,[n("mi",null,"s"),n("mi",null,"p"),n("mi",null,"r"),n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"g"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"a"),n("mi",null,"p"),n("mi",null,"p"),n("mi",null,"l"),n("mi",null,"i"),n("mi",null,"c"),n("mi",null,"a"),n("mi",null,"t"),n("mi",null,"i"),n("mi",null,"o"),n("mi",null,"n"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"n"),n("mi",null,"a"),n("mi",null,"m"),n("mi",null,"e")]),n("mi",{mathvariant:"normal"},".")]),n("annotation",{encoding:"application/x-tex"},"{spring.application.name}.")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"ppl"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal"},"nam"),n("span",{class:"mord mathnormal"},"e")]),n("span",{class:"mord"},".")])])])]),n("li",{"spring.application.name":""},"$"),n("li",null,"extensionConfigs 一个微服务的多个配置，比如 nacos,mybatis"),n("li",null,"sharedConfigs 多个微服务公共配置，比如 redis")],-1),w=s(`<h3 id="refreshscope实现动态感知" tabindex="-1"><a class="header-anchor" href="#refreshscope实现动态感知" aria-hidden="true">#</a> @RefreshScope实现动态感知</h3><p>@Value注解可以获取到配置中心的值，但是无法动态感知修改后的值，需要利用@RefreshScope注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RefreshScope</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${common.age}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/common&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>@RefreshScope 导致@Scheduled定时任务失效问题</strong></p><p>当利用@RefreshScope刷新配置后会导致定时任务失效</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableScheduling</span>   <span class="token comment">// 开启定时任务功能</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosConfigApplication</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RefreshScope</span>  <span class="token comment">//动态感知修改后的值</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${common.age}&quot;</span><span class="token punctuation">)</span>
     <span class="token class-name">String</span> age<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${common.name}&quot;</span><span class="token punctuation">)</span>
     <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/common&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">&quot;,&quot;</span><span class="token operator">+</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//触发@RefreshScope执行逻辑会导致@Scheduled定时任务失效</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;*/3 * * * * ?&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//定时任务每隔3s执行一次</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;定时任务正常执行。。。。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果：</p>`,7),C=n("li",null,"当在配置中心变更属性后，定时任务失效",-1),q={href:"http://localhost:8010/common%EF%BC%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%94%9F%E6%95%88",target:"_blank",rel:"noopener noreferrer"},_=s(`<p>原因：@RefreshScope修饰的bean的属性发生变更后，会从缓存中清除。此时没有这个bean，定时任务当然也就不生效了。</p><p>详细原因如下：</p><ol><li>@RefreshScope 注解标注了@Scope 注解，并默认了ScopedProxyMode.TARGET_CLASS属性，此属性的功能就是创建一个代理，在每次调用的时候都用它来调用GenericScope#get 方法来获取bean对象。</li><li>在GenericScope 里面包装了一个内部类 BeanLifecycleWrapperCache 来对加了 @RefreshScope 的bean进行缓存，使其在不刷新时获取的都是同一个对象。</li><li>如属性发生变更会调用 ContextRefresher#refresh()——&gt;RefreshScope#refreshAll() 进行缓存清理方法调用，并发送刷新事件通知 ——&gt; 调用GenericScope#destroy() 实现清理缓存</li><li>当下一次使用此bean对象时，代理对象会调用GenericScope#get(String name, ObjectFactory objectFactory) 方法创建一个新的bean对象，并存入缓存中，此时新对象因为Spring 的装配机制就是新的属性了</li></ol><p>后面会结合源码分析，核心源码：GenericScope#get</p><p><strong>解决方案</strong></p><p>实现Spring事件监听器，监听 RefreshScopeRefreshedEvent事件，监听方法中进行一次定时方法的调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RefreshScope</span>  <span class="token comment">//动态感知修改后的值</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RefreshScopeRefreshedEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${common.age}&quot;</span><span class="token punctuation">)</span>
     <span class="token class-name">String</span> age<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${common.name}&quot;</span><span class="token punctuation">)</span>
     <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/common&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">&quot;,&quot;</span><span class="token operator">+</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//触发@RefreshScope执行逻辑会导致@Scheduled定时任务失效</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;*/3 * * * * ?&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//定时任务每隔3s执行一次</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;定时任务正常执行。。。。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">RefreshScopeRefreshedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nacos配置中心源码分析" tabindex="-1"><a class="header-anchor" href="#nacos配置中心源码分析" aria-hidden="true">#</a> Nacos配置中心源码分析</h2>`,8),E={href:"https://www.processon.com/view/link/62d678c31e08531cf8db16ef",target:"_blank",rel:"noopener noreferrer"},R=s(`<h3 id="nacos-config-client源码分析" tabindex="-1"><a class="header-anchor" href="#nacos-config-client源码分析" aria-hidden="true">#</a> nacos config client源码分析</h3><p>配置中心核心接口ConfigService</p><figure><img src="https://img.jssjqd.cn/202304130414926.png" alt="image-20230413041438931" tabindex="0" loading="lazy"><figcaption>image-20230413041438931</figcaption></figure><p><strong>获取配置</strong></p><p>获取配置的主要方法是 NacosConfigService 类的 getConfig 方法，通常情况下该方法直接从本地文件中取得配置的值，如果本地文件不存在或者内容为空，则再通过grpc从远端拉取配置，并保存到本地快照中。</p><p>​ <img src="https://img.jssjqd.cn/202304130414985.png" alt="image-20230413041451053" loading="lazy"></p><p><strong>注册监听器</strong></p><p>配置中心客户端会通过对配置项注册监听器达到在配置项变更的时候执行回调的功能。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>ConfigService#getConfigAndSignListener
ConfigService#addListener
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos 可以通过以上方式注册监听器，它们内部的实现均是调用 ClientWorker 类的 addCacheDataIfAbsent。其中 CacheData 是一个维护配置项和其下注册的所有监听器的实例，所有的 CacheData 都保存在 ClientWorker 类中的原子 cacheMap 中，其内部的核心成员有：</p><figure><img src="https://img.jssjqd.cn/202304130415336.png" alt="image-20230413041519702" tabindex="0" loading="lazy"><figcaption>image-20230413041519702</figcaption></figure><h3 id="nacos-config-server源码分析" tabindex="-1"><a class="header-anchor" href="#nacos-config-server源码分析" aria-hidden="true">#</a> nacos config server源码分析</h3><p><strong>配置dump</strong></p><figure><img src="https://img.jssjqd.cn/202304130415026.png" alt="image-20230413041537923" tabindex="0" loading="lazy"><figcaption>image-20230413041537923</figcaption></figure><p>服务端启动时就会依赖 DumpService 的 init 方法，从数据库中 load 配置存储在本地磁盘上，并将一些重要的元信息例如 MD5 值缓存在内存中。服务端会根据心跳文件中保存的最后一次心跳时间，来判断到底是从数据库 dump 全量配置数据还是部分增量配置数据（如果机器上次心跳间隔是 6h 以内的话）。</p><p>全量 dump 当然先清空磁盘缓存，然后根据主键 ID 每次捞取一千条配置刷进磁盘和内存。增量 dump 就是捞取最近六小时的新增配置（包括更新的和删除的），先按照这批数据刷新一遍内存和文件，再根据内存里所有的数据全量去比对一遍数据库，如果有改变的再同步一次，相比于全量 dump 的话会减少一定的数据库 IO 和磁盘 IO 次数。</p><p><strong>配置发布</strong></p><p>发布配置的代码位于 ConfigController#publishConfig中。集群部署，请求一开始也只会打到一台机器，这台机器将配置插入Mysql中进行持久化。服务端并不是针对每次配置查询都去访问 MySQL ，而是会依赖 dump 功能在本地文件中将配置缓存起来。因此当单台机器保存完毕配置之后，需要通知其他机器刷新内存和本地磁盘中的文件内容，因此它会发布一个名为 ConfigDataChangeEvent 的事件，这个事件会通过grpc调用通知所有集群节点（包括自身），触发本地文件和内存的刷新。</p><figure><img src="https://img.jssjqd.cn/202304130415319.png" alt="image-20230413041557023" tabindex="0" loading="lazy"><figcaption>image-20230413041557023</figcaption></figure>`,19);function j(I,A){const e=o("ExternalLinkIcon");return l(),i("div",null,[r,n("p",null,[a("官方文档： "),n("a",u,[a("https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config"),t(e)])]),m,d,n("ul",null,[n("li",null,[a("prefix 默认为 "),n("a",k,[a("spring.application.name"),t(e)]),a(" 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。")]),n("li",v,[a("spring.profiles.active 即为当前环境对应的 profile，详情可以参考 "),n("a",g,[a("Spring Boot文档"),t(e)]),a("。 注意：当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 "),h]),b]),f,x,y,S,w,n("ul",null,[C,n("li",null,[a("当再次访问"),n("a",q,[a("http://localhost:8010/common，定时任务生效"),t(e)])])]),_,n("p",null,[n("a",E,[a("https://www.processon.com/view/link/62d678c31e08531cf8db16ef"),t(e)])]),R])}const M=p(c,[["render",j],["__file","index.html.vue"]]);export{M as default};
