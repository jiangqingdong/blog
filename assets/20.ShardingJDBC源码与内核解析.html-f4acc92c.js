import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as l,c as i,e as a,w as u,a as n,b as s,f as p}from"./app-18640bff.js";const r={},k=n("p",null,"[TOC]",-1),d=n("h3",null," ShardingJDBC核心源码以及内核解析 ",-1),m=p(`<p>​ 通过上一章节，我们已经对ShardingJDBC的各种使用方式有了一些了解，这一章节我们自然要更进一步，深入ShardingJDBC的内核。但是内核其实是非常复杂的，决定开始深入之前，最好带上明确的目的，否则只会是一头雾水。这次我们的主要问题就从实际使用出发，重点了解一下上一章节中用到的各种各样花里胡哨的配置，是怎么从ShardingJDBC的内核中扩展出来的。以及我们应该要如何自行扩展各种组件。</p><h1 id="一、shardingjdbc内核工作原理解读" tabindex="-1"><a class="header-anchor" href="#一、shardingjdbc内核工作原理解读" aria-hidden="true">#</a> 一、ShardingJDBC内核工作原理解读</h1><p>​ 在深入之前，你需要了解ShardingJDBC整体上是怎么工作的。ShardingSphere的整体架构图是这样的：</p><figure><img src="https://note.youdao.com/yws/res/52330/WEBRESOURCEd519f8cb08657e1b5b669459d34a7b12" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>​ 可以看到，ShardingSphere的工作整体就分为这几个步骤：</p><h2 id="_0、配置管控" tabindex="-1"><a class="header-anchor" href="#_0、配置管控" aria-hidden="true">#</a> 0、配置管控</h2><p>​ 在进入ShardingSphere的内核之前，ShardingSphere做了大量的配置信息管控。不光是将应用的配置信息进行解析，同时ShardingSphere还支持将这些配置信息放到第三方的注册中心，从而可以实现应用层的水平扩展。</p><p>​ 对于使用ShardingJDBC开发来说，或许这不是一个多起眼的功能。因为应用完全可以自己管理配置，或者自行接入Nacos这样的配置中心。但是如果运维人员使用ShardingProxy的话，这样的配置管控功能就非常有作用了。后面分享ShardingProxy时，我们再深入理解。</p><h2 id="_1、sql-parser-sql解析引擎" tabindex="-1"><a class="header-anchor" href="#_1、sql-parser-sql解析引擎" aria-hidden="true">#</a> 1、SQL Parser: SQL解析引擎</h2><p>​ 解析过程分为词法解析和语法解析。 词法解析器用于将SQL拆解为不可再分的原子符号，称为Token。并根据不同数据库方言所提供的字典，将其归类为关键字，表达式，字面量和操作符。 再使用语法解析器将SQL转换为抽象语法树(简称AST， Abstract Syntax Tree)。</p><p>​ 例如对下面一条SQL语句：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT id, name FROM t_user WHERE status = &#39;ACTIVE&#39; AND age &gt; 18
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 会被解析成下面这样一颗树：</p><figure><img src="https://note.youdao.com/yws/res/52332/WEBRESOURCEa730c69ae7e5e9d34f327ed48215ebe5" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>​ SQL解析是整个分库分表产品的核心，其性能和兼容性是最重要的衡量指标。ShardingSphere在1.4.x之前采用的是性能较快的Druid作为SQL解析器。1.5.x版本后，采用自研的SQL解析器，针对分库分表场景，采取对SQL半理解的方式，提高SQL解析的性能和兼容性。然后从3.0.x版本后，开始使用ANLTR作为SQL解析引擎。这是个开源的SQL解析引擎，很多开源产品都使用他来解析SQL。比如像Druid、Flink、Hive、RocketMQ、Elasticsearch等等。有兴趣的同学可以自行了解一下。ShardingSphere在使用ANLTR时，还增加了一些AST的缓存功能。针对ANLTR4的特性，官网建议尽量采用PreparedStatement的预编译方式来提高SQL执行的性能。</p><h2 id="_2、sql-router-sql-路由引擎" tabindex="-1"><a class="header-anchor" href="#_2、sql-router-sql-路由引擎" aria-hidden="true">#</a> 2、SQL Router- SQL 路由引擎</h2><p>​ 根据解析上下文匹配数据库和表的分片策略，并生成路由路径。对于携带分片键的 SQL，根据分片键的不同可以划分为单片路由（分片键的操作符是等号）、多片路由（分片键的操作符是 IN）和范围路由（分片键的操作符是 BETWEEN）。不携带分片键的 SQL 则采用广播路由。</p><p>​ 分片策略通常可以采用由数据库内置或由用户方配置。数据库内置的方案较为简单，内置的分片策略大致可分为尾数取模、哈希、范围、标签、时间等。由用户方配置的分片策略则更加灵活，可以根据使用方需求定制复合分片策略。</p><p>​ 实际使用时，应尽量使用分片路由，明确路由策略。因为广播路由影响过大，不利于集群管理及扩展。</p><figure><img src="https://note.youdao.com/yws/res/52334/WEBRESOURCE26995c99efb5e22cf294282da29cee4f" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ul><li><p>全库表路由：对于不带分片键的DQL、DML以及DDL语句，会遍历所有的库表，逐一执行。例如 select * from course 或者 select * from course where ustatus=&#39;1&#39;(不带分片键)</p></li><li><p>全库路由：对数据库的操作都会遍历所有真实库。 例如 set autocommit=0</p></li><li><p>全实例路由：对于DCL语句，每个数据库实例只执行一次，例如 CREATE USER <a href="mailto:customer@127.0.0.1">customer@127.0.0.1</a> identified BY &#39;123&#39;;</p></li><li><p>单播路由：仅需要从任意库中获取数据即可。 例如 DESCRIBE course</p></li><li><p>阻断路由：屏蔽SQL对数据库的操作。例如 USE coursedb。就不会在真实库中执行，因为针对虚拟表操作，不需要切换数据库。</p></li></ul><h2 id="_3、sql-rewriter-sql-优化引擎" tabindex="-1"><a class="header-anchor" href="#_3、sql-rewriter-sql-优化引擎" aria-hidden="true">#</a> 3、SQL Rewriter : SQL 优化引擎</h2><p>​ 首先，在数据方言方面。Apache ShardingSphere 提供了 SQL 方言翻译的能力，能否实现数据库方言之间的自动转换。例如，用户可以使用 MySQL 客户端连接 ShardingSphere 并发送基于 MySQL 方言的 SQL，ShardingSphere 能自动识别用户协议与存储节点类型自动完成 SQL 方言转换，访问 PostgreSQL 等异构存储节点。</p><figure><img src="https://note.youdao.com/yws/res/52336/WEBRESOURCE49284c2fa6d3f535f4433e379007606c" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>​ 接下来，用户只需要面向逻辑库和逻辑表来写SQL，最终由ShardigSphere的改写引擎将SQL改写为在真实数据库中可以正确执行的语句。SQL改写分为正确性改写和优化改写。</p><p><strong>正确性改写</strong></p><p>​ 在包含分表的场景中，需要将分表配置中的逻辑表名称改写为路由之后所获取的真实表名称。仅分库则不需要表名称的改写。除此之外，还包括补列和分页信息修正等内容。</p><p><strong>优化改写</strong></p><p>​ 优化改写的目的是在不影响查询正确性的情况下，对性能进行提升的有效手段。它分为单节点优化和流式归并优化。比如我们之前提到，在当前版本下，对一个库的多次查询，会通过UNION 合并成一个大的SQL，这也是一种优化改写。</p><figure><img src="https://note.youdao.com/yws/res/52338/WEBRESOURCEd752b8c3a27631af6e4f8a109cf0cb0d" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="_4、sql-executor-sql执行引擎" tabindex="-1"><a class="header-anchor" href="#_4、sql-executor-sql执行引擎" aria-hidden="true">#</a> 4、SQL Executor ： SQL执行引擎</h2><p>​ ShardingSphere 采用一套自动化的执行引擎，负责将路由和改写完成之后的真实 SQL 安全且高效发送到底层数据源执行。它不是简单地将 SQL 通过 JDBC 直接发送至数据源执行；也并非直接将执行请求放入线程池去并发执行。它更关注平衡数据源连接创建以及内存占用所产生的消耗，以及最大限度地合理利用并发等问题。执行引擎的目标是自动化的平衡资源控制与执行效率。</p><figure><img src="https://note.youdao.com/yws/res/52340/WEBRESOURCEb42d79e3dcc7700c24fde47e63daf8b8" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>​ 这里主要是理解内存限制模式和连接限制模式。简单理解，</p><ul><li>内存限制模式只需要保持一个JDBC连接，单线程即可完成某一个真实库的所有数据访问。</li><li>连接限制模式就需要保持多个JDBC连接，也就需要多线程并发完成某一个真实库的所有数据访问。</li></ul><h2 id="_5、result-merger-结果归并" tabindex="-1"><a class="header-anchor" href="#_5、result-merger-结果归并" aria-hidden="true">#</a> 5、Result Merger： 结果归并</h2><p>​ 将从各个数据节点获取的多数据结果集，组合成为一个结果集并正确的返回至请求客户端，称为结果归并。</p><figure><img src="https://note.youdao.com/yws/res/52342/WEBRESOURCEb8b747613463ea0301fd30f1cf267769" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>​ 其中重点是理解流式归并与内存归并：</p><ul><li><p>流式归并是指每一次从结果集中获取到的数据，都能够通过逐条获取的方式返回正确的单条数据，它与数据库原生的返回结果集的方式最为契合。遍历、排序以及流式分组都属于流式归并的一种。通常内存限制模式就可以使用流式归并，比较适合OLTP场景。</p></li><li><p>内存归并则是需要将结果集的所有数据都遍历并存储在内存中，再通过统一的分组、排序以及聚合等计算之后，再将其封装成为逐条访问的数据结果集返回。。通常连接限制模式就可以使用内存归并，比较适合OLAP场景。</p></li></ul><h1 id="二、shardingjdbc重点源码解读" tabindex="-1"><a class="header-anchor" href="#二、shardingjdbc重点源码解读" aria-hidden="true">#</a> 二、ShardingJDBC重点源码解读</h1><p>​ 这些引擎都比较抽象，最终还是需要深入到源码当中才能理解他们的庐山真面目。</p><p>​ 如何调试ShardingJDBC的源码呢？之前分析过，ShardingJDBC的本质其实是生成一个带有分库分表功能的ShardingSphereDatasource。他就是我们经常使用的DataSource接口的实现类。因此，我们也可以尝试构建一个JDBC的应用，作为代码调试的起点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShardingJDBCDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">//=======一、配置数据库</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DataSource</span><span class="token punctuation">&gt;</span></span> dataSourceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为两个数据库的datasource</span>
        <span class="token comment">// 配置第一个数据源</span>
        <span class="token class-name">HikariDataSource</span> dataSource0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource0<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource0<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/coursedb?serverTimezone=GMT%2B8&amp;useSSL=false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource0<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource0<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;m0&quot;</span><span class="token punctuation">,</span> dataSource0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 配置第二个数据源</span>
        <span class="token class-name">HikariDataSource</span> dataSource1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource1<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource1<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/coursedb2?serverTimezone=GMT%2B8&amp;useSSL=false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource1<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource1<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;m1&quot;</span><span class="token punctuation">,</span> dataSource1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//=======二、配置分库分表策略</span>
        <span class="token class-name">ShardingRuleConfiguration</span> shardingRuleConfig <span class="token operator">=</span> <span class="token function">createRuleConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//三、配置属性值</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//打开日志输出 4.x版本是sql.show，5.x版本变成了sql-show</span>
        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;sql-show&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//K1 创建ShardingSphere的数据源 ShardingDataSource</span>
        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">ShardingSphereDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>dataSourceMap<span class="token punctuation">,</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span>shardingRuleConfig<span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//-------------测试部分-----------------//</span>
        <span class="token class-name">ShardingJDBCDemo</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShardingJDBCDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//建表</span>
<span class="token comment">//        test.droptable(dataSource);</span>
<span class="token comment">//        test.createtable(dataSource);</span>
        <span class="token comment">//插入数据</span>
<span class="token comment">//        test.addcourse(dataSource);</span>
        <span class="token comment">//K1 调试的起点 查询数据</span>
        test<span class="token punctuation">.</span><span class="token function">querycourse</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ShardingRuleConfiguration</span> <span class="token function">createRuleConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ShardingRuleConfiguration</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShardingRuleConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//spring.shardingsphere.rules.sharding.tables.course.actual-data-nodes=m$-&gt;{0..1}.course_$-&gt;{1..2}</span>
        <span class="token class-name">ShardingTableRuleConfiguration</span> courseTableRuleConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShardingTableRuleConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;course&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;m$-&gt;{0..1}.course_$-&gt;{1..2}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.type=SNOWFLAKE</span>
        <span class="token comment">//spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.props.worker.id=1</span>
        <span class="token class-name">Properties</span> snowflakeprop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        snowflakeprop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;worker.id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">getKeyGenerators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;alg_snowflake&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AlgorithmConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;SNOWFLAKE&quot;</span><span class="token punctuation">,</span> snowflakeprop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//spring.shardingsphere.rules.sharding.tables.course.key-generate-strategy.column=cid</span>
        <span class="token comment">//spring.shardingsphere.rules.sharding.tables.course.key-generate-strategy.key-generator-name=alg_snowflake</span>
        courseTableRuleConfig<span class="token punctuation">.</span><span class="token function">setKeyGenerateStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyGenerateStrategyConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;cid&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;alg_snowflake&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//spring.shardingsphere.rules.sharding.tables.course.database-strategy.standard.sharding-column=cid</span>
        <span class="token comment">//spring.shardingsphere.rules.sharding.tables.course.database-strategy.standard.sharding-algorithm-name=course_db_alg</span>
        courseTableRuleConfig<span class="token punctuation">.</span><span class="token function">setDatabaseShardingStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardShardingStrategyConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;cid&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;course_db_alg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//spring.shardingsphere.rules.sharding.sharding-algorithms.course_db_alg.type=MOD</span>
        <span class="token comment">//spring.shardingsphere.rules.sharding.sharding-algorithms.course_db_alg.props.sharding-count=2</span>
        <span class="token class-name">Properties</span> modProp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        modProp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;sharding-count&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">getShardingAlgorithms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;course_db_alg&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">AlgorithmConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;MOD&quot;</span><span class="token punctuation">,</span>modProp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//spring.shardingsphere.rules.sharding.tables.course.table-strategy.standard.sharding-column=cid</span>
        <span class="token comment">//spring.shardingsphere.rules.sharding.tables.course.table-strategy.standard.sharding-algorithm-name=course_tbl_alg</span>
        courseTableRuleConfig<span class="token punctuation">.</span><span class="token function">setTableShardingStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardShardingStrategyConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;cid&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;course_tbl_alg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//#spring.shardingsphere.rules.sharding.sharding-algorithms.course_tbl_alg.type=INLINE</span>
        <span class="token comment">//#spring.shardingsphere.rules.sharding.sharding-algorithms.course_tbl_alg.props.algorithm-expression=course_$-&gt;{cid%2+1}</span>
        <span class="token class-name">Properties</span> inlineProp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inlineProp<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;algorithm-expression&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;course_$-&gt;{((cid+1)%4).intdiv(2)+1}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">getShardingAlgorithms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;course_tbl_alg&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">AlgorithmConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;INLINE&quot;</span><span class="token punctuation">,</span>inlineProp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        result<span class="token punctuation">.</span><span class="token function">getTables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>courseTableRuleConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//添加10条课程记录</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addcourse</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> orderId <span class="token operator">=</span> <span class="token function">executeAndGetGeneratedKey</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">&quot;INSERT INTO course (cname, user_id, cstatus) VALUES (&#39;java&#39;,&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;, &#39;1&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;添加课程成功，课程ID：&quot;</span> <span class="token operator">+</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">querycourse</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//ShardingConnectioin</span>
            conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//ShardingStatement</span>
            <span class="token class-name">Statement</span> statement <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;SELECT cid,cname,user_id,cstatus from course where cid=851198093910081536&quot;</span><span class="token punctuation">;</span>
            <span class="token comment">//ShardingResultSet</span>
            <span class="token class-name">ResultSet</span> result <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result:&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">&quot;cid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
                <span class="token class-name">Connection</span> conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Statement</span> statement <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">executeAndGetGeneratedKey</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
                <span class="token class-name">Connection</span> conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Statement</span> statement <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Statement</span><span class="token punctuation">.</span><span class="token constant">RETURN_GENERATED_KEYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">getGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * -----------------------------表初始化--------------------------------
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">droptable</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token function">execute</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">&quot;DROP TABLE IF EXISTS course_1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">execute</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">&quot;DROP TABLE IF EXISTS course_2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createtable</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token function">execute</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">&quot;CREATE TABLE course_1 (cid BIGINT(20) PRIMARY KEY,cname VARCHAR(50) NOT NULL,user_id BIGINT(20) NOT NULL,cstatus varchar(10) NOT NULL);&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">execute</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">&quot;CREATE TABLE course_2 (cid BIGINT(20) PRIMARY KEY,cname VARCHAR(50) NOT NULL,user_id BIGINT(20) NOT NULL,cstatus varchar(10) NOT NULL);&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>前面一大段代码都不用太过关注，无法就是将之前采用配置文件指定的规则换成了Java实现而已。重点从K1 处调试即可。</p></blockquote><h1 id="三、理解shardingsphere核心的spi扩展机制" tabindex="-1"><a class="header-anchor" href="#三、理解shardingsphere核心的spi扩展机制" aria-hidden="true">#</a> 三、理解ShardingSphere核心的SPI扩展机制</h1><h2 id="_1、从主键生成策略入手" tabindex="-1"><a class="header-anchor" href="#_1、从主键生成策略入手" aria-hidden="true">#</a> 1、从主键生成策略入手</h2><p>​ 源码中有非常多值得学习研究的部分。按照之前的思路，我们重点是理解配置的各种策略是如何从ShardingSphere中扩展出来的。以主键生成策略为例，抽取重点源码解读一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Key generate algorithm factory.
 */</span>
<span class="token annotation punctuation">@NoArgsConstructor</span><span class="token punctuation">(</span>access <span class="token operator">=</span> <span class="token class-name">AccessLevel</span><span class="token punctuation">.</span><span class="token constant">PRIVATE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">KeyGenerateAlgorithmFactory</span> <span class="token punctuation">{</span>
    <span class="token comment">//加载所有的主键生成策略</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">ShardingSphereServiceLoader</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">KeyGenerateAlgorithm</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 根据配置的主键生成策略，获取一个主键生成算法
     * 例如：spring.shardingsphere.rules.sharding.key-generators.usercourse_keygen.type=SNOWFLAKE
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">KeyGenerateAlgorithm</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">AlgorithmConfiguration</span> keyGenerateAlgorithmConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ShardingSphereAlgorithmFactory</span><span class="token punctuation">.</span><span class="token function">createAlgorithm</span><span class="token punctuation">(</span>keyGenerateAlgorithmConfig<span class="token punctuation">,</span> <span class="token class-name">KeyGenerateAlgorithm</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 判断是否包含配置的算法
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> keyGenerateAlgorithmType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">TypedSPIRegistry</span><span class="token punctuation">.</span><span class="token function">findRegisteredService</span><span class="token punctuation">(</span><span class="token class-name">KeyGenerateAlgorithm</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> keyGenerateAlgorithmType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 先来看主键生成策略是如何加载的：ShardingSphereServiceLoader.register(KeyGenerateAlgorithm.class);</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ShardingSphereServiceLoader</span> <span class="token punctuation">{</span>
    <span class="token comment">//线程安全Map，缓存所有主键生成器</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token constant">SERVICES</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> serviceInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">SERVICES</span><span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>serviceInterface<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">SERVICES</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>serviceInterface<span class="token punctuation">,</span> <span class="token function">load</span><span class="token punctuation">(</span>serviceInterface<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//使用java的SPI机制加载接口的所有实现类</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> serviceInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> each <span class="token operator">:</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>serviceInterface<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 其中看到了最熟悉不过的ServiceLoader.load方法，这就是Java提供的SPI扩展机制。这意味着，我们自己也可以写一个KeyGenerateAlgorithm实现类，然后只需要通过SPI的方式让ShardingSphere加载进去就行。</p><p>​ 然后我们看看KeyGenerateAlgorithm有哪些实现类。比如说随便找一个比较眼熟的NanoIdKeyGenerateAlgorithm。他的源码很简单</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NanoIdKeyGenerateAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">KeyGenerateAlgorithm</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Properties</span> props<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">NanoIdKeyGenerateAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">NanoIdUtils</span><span class="token punctuation">.</span><span class="token function">randomNanoId</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">NanoIdUtils</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_ALPHABET</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;NANOID&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Generated</span>
    <span class="token keyword">public</span> <span class="token class-name">Properties</span> <span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 这个getType方法简单粗暴的返回了一个字符串NANOID，有没有觉得跟我们在配置文件当中配置的主键生成算法很像？</p><p>​ 看到这，我们就可以自己做一个实验，尝试扩展一个自己的主键生成策略。</p><p>​ 首先：自行实现一个算法类，实现KeyGenerateAlgorithm接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyKeyGeneratorAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">KeyGenerateAlgorithm</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AtomicLong</span> atom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Properties</span> props<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LocalDateTime</span> ldt <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> timestampS <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;HHmmssSSS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ldt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token operator">+</span>timestampS<span class="token operator">+</span>atom<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Properties</span> <span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;MYKEY&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 然后： 在classpath/META-INF/services目录下(<code>这个目录是Java的SPI机制加载的固定目录</code>)创建一个SPI的扩展文件，文件名就是接口的全类名。org.apache.shardingsphere.sharding.spi.KeyGenerateAlgorithm 。文件中的内容，一行就记录一个接口的实现类全类名。就把我们自己写的这个类名写进去。com.roy.shardingDemo.algorithm.MyKeyGeneratorAlgorithm</p><p>​ 最后：在我们之前做的生成主键的Demo中修改一下配置，将主键生成算法的类型配置成MYKEY</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.shardingsphere.rules.sharding.key-generators.course_cid_alg.type</span><span class="token punctuation">=</span><span class="token value attr-value">MYKEY</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 这样，在插入course表的时候，就可以按照我们自己的实现生成主键了。</p><p>​ 通过这个简单的试验，你是不是可以自行梳理出ShardingSphere提供了哪些主键生成算法，以及这些算法要怎么配了？实际上，这也就对应了官方文档中不太看得懂这一段技术手册。</p><figure><img src="https://note.youdao.com/yws/res/52344/WEBRESOURCEd1aff9d5d3bd4ccc5748145a33378ada" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>​ 看懂了这一个部分了之后，官方文档中其他那些组件，你也就都可以入手自己梳理了。</p>`,65),v=n("p",null,"接下来，如果你对主键生成策略比较熟悉，可以尝试对接一些第三方的主键生成框架。比如最简单的通过Redis的incr指令生成主键，或者像美团的leaf这一类主键生成框架。",-1),g={href:"https://cosid.ahoo.me/",target:"_blank",rel:"noopener noreferrer"},b=p(`<h2 id="_2、尝试扩展分片算法" tabindex="-1"><a class="header-anchor" href="#_2、尝试扩展分片算法" aria-hidden="true">#</a> 2、尝试扩展分片算法</h2><p>​ 还记得在上一章节中，我们在介绍COMPLEX复杂分片策略时，创建了一个MyComplexAlgorithm吗？之前我们是通过ShardingSphere提供的一个很别扭的CLASS_BASED类型的分片算法配置进去的。实际上，我们也可以使用ShardingSphere提供的SPI机制配置进去。</p><p>​ 首先，需要添加一个SPI的配置文件org.apache.shardingsphere.sharding.spi.ShardingAlgorithm，然后在文件中写入com.roy.shardingDemo.algorithm.MyComplexAlgorithm。就可以完成算法接入了。</p><p>​ 然后，如果想要能够被配置文件识别，我们可以在MyComplexAlgorithm类中，增加实现getType方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComplexAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">ComplexKeysShardingAlgorithm</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token comment">//........</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;MYCOMPLEX&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>示例中读取了一个属性sharding-columns，在示例中其实并没有用到。如果你需要增加有用的属性时，可以进行参照。</p></blockquote><p>​ 接下来，就可以在配置分库分表策略时，指定我们自己的这个实现类了。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.shardingsphere.rules.sharding.sharding-algorithms.course_tbl_alg.type</span><span class="token punctuation">=</span><span class="token value attr-value">MYCOMPLEX</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 最后，愉快的尝试扩展其他组件把。</p><h1 id="五、章节总结" tabindex="-1"><a class="header-anchor" href="#五、章节总结" aria-hidden="true">#</a> 五、章节总结</h1><p>​ 这一章节我们理解了一下ShardingSphere内核当中比较重要的几个机制。然后建立了一个示例，作为调试重点源码的入口。最后带着扩展主键生成算法的目的，从源码中推测出了ShardingSphere提供的SPI扩展点。整个过程虽然并没有研究太深，但是整个路线最大的目的是为了给你打开一算深入理解ShardingSphere的门。将应用和源码之间的隔阂打开。有兴趣的话，你可以更深入的研究了解ShardingSphere的底层，结合你自己的业务场景，去设计更复杂的分库分表策略，支撑数据量更大，更复杂的分库分表场景。</p>`,11),h={href:"https://note.youdao.com/s/6e2NjaCd",target:"_blank",rel:"noopener noreferrer"};function S(y,f){const o=e("center"),t=e("ExternalLinkIcon");return l(),i("div",null,[k,a(o,null,{default:u(()=>[d,s(" -- 楼兰")]),_:1}),m,n("blockquote",null,[v,n("p",null,[s("另外，如果你有兴趣，建议你再通过CosIdKeyGenerateAlgorithm去深入理解一下CosID主键生成框架。这是ShardingSphere引入的一个开源的主键生成框架，据说性能非常高。官方地址： "),n("a",g,[s("https://cosid.ahoo.me/"),a(t)]),s(" 。但是，据我的试验，当前版本下对CosID的segmentID模式集成好像还不是太好。有兴趣你可以自行尝试一下。")])]),b,n("blockquote",null,[n("p",null,[s("有道云笔记链接："),n("a",h,[s("https://note.youdao.com/s/6e2NjaCd"),a(t)])])])])}const _=c(r,[["render",S],["__file","20.ShardingJDBC源码与内核解析.html.vue"]]);export{_ as default};
