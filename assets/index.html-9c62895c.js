const e=JSON.parse('{"key":"v-5a5ac3e1","path":"/pages/1c9782/","title":"MySQL索引数据结构详解","lang":"zh-CN","frontmatter":{"title":"MySQL索引数据结构详解","date":"2022-08-31T01:56:40.000Z","permalink":"/pages/1c9782/","author":{"name":"江"},"category":["MySQL"],"description":"索引数据结构 索引是帮助MySQL高效获取数据的排好序的数据结构 二叉树 极端情况下会变成一条直线 红黑树 相比于二叉树，数据平衡了，但是在数据比较多的情况下，树的高度会比较高，查询数据困难 Hash表 对索引的key进行一次hash计算就可以定位出数据存储的位置 很多时候Hash索引要比B+ 树索引更高效 仅能满足 “=”，“IN”，不支持范围查询 hash冲突问题 image-20230630211334131","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/pages/1c9782/"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"MySQL索引数据结构详解"}],["meta",{"property":"og:description","content":"索引数据结构 索引是帮助MySQL高效获取数据的排好序的数据结构 二叉树 极端情况下会变成一条直线 红黑树 相比于二叉树，数据平衡了，但是在数据比较多的情况下，树的高度会比较高，查询数据困难 Hash表 对索引的key进行一次hash计算就可以定位出数据存储的位置 很多时候Hash索引要比B+ 树索引更高效 仅能满足 “=”，“IN”，不支持范围查询 hash冲突问题 image-20230630211334131"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-01T18:24:48.000Z"}],["meta",{"property":"article:author","content":"江"}],["meta",{"property":"article:published_time","content":"2022-08-31T01:56:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-01T18:24:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL索引数据结构详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-31T01:56:40.000Z\\",\\"dateModified\\":\\"2023-08-01T18:24:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"江\\"}]}"]]},"headers":[{"level":2,"title":"索引数据结构","slug":"索引数据结构","link":"#索引数据结构","children":[{"level":3,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[]},{"level":3,"title":"红黑树","slug":"红黑树","link":"#红黑树","children":[]},{"level":3,"title":"Hash表","slug":"hash表","link":"#hash表","children":[]},{"level":3,"title":"B-Tree","slug":"b-tree","link":"#b-tree","children":[]},{"level":3,"title":"B+Tree(B-Tree变种)","slug":"b-tree-b-tree变种","link":"#b-tree-b-tree变种","children":[]}]},{"level":2,"title":"存储引擎","slug":"存储引擎","link":"#存储引擎","children":[{"level":3,"title":"MyISAM","slug":"myisam","link":"#myisam","children":[]},{"level":3,"title":"InnoDB","slug":"innodb","link":"#innodb","children":[]}]},{"level":2,"title":"索引最左前缀原理","slug":"索引最左前缀原理","link":"#索引最左前缀原理","children":[{"level":3,"title":"联合索引的底层存储结构","slug":"联合索引的底层存储结构","link":"#联合索引的底层存储结构","children":[]}]},{"level":2,"title":"千万级数据表如何用B+树索引快速查找","slug":"千万级数据表如何用b-树索引快速查找","link":"#千万级数据表如何用b-树索引快速查找","children":[]},{"level":2,"title":"聚集索引&聚簇索引&稀疏索引是什么","slug":"聚集索引-聚簇索引-稀疏索引是什么","link":"#聚集索引-聚簇索引-稀疏索引是什么","children":[]},{"level":2,"title":"为什么DBA推荐用自增主键做索引","slug":"为什么dba推荐用自增主键做索引","link":"#为什么dba推荐用自增主键做索引","children":[]},{"level":2,"title":"联合索引底层数据结构是怎么样的","slug":"联合索引底层数据结构是怎么样的","link":"#联合索引底层数据结构是怎么样的","children":[]},{"level":2,"title":"MySQL最左前缀优化原则","slug":"mysql最左前缀优化原则","link":"#mysql最左前缀优化原则","children":[]}],"git":{"createdTime":1690914288000,"updatedTime":1690914288000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":3.06,"words":917},"filePathRelative":"20.性能调优/00.MySQL/01.MySQL索引数据结构详解.md","localizedDate":"2022年8月31日","excerpt":"<h2> 索引数据结构</h2>\\n<p>索引是帮助MySQL高效获取数据的排好序的数据结构</p>\\n<h3> 二叉树</h3>\\n<p>极端情况下会变成一条直线</p>\\n<h3> 红黑树</h3>\\n<p>相比于二叉树，数据平衡了，但是在数据比较多的情况下，树的高度会比较高，查询数据困难</p>\\n<h3> Hash表</h3>\\n<ul>\\n<li>\\n<p>对索引的key进行一次hash计算就可以定位出数据存储的位置</p>\\n</li>\\n<li>\\n<p>很多时候Hash索引要比B+ 树索引更高效</p>\\n</li>\\n<li>\\n<p>仅能满足 “=”，“IN”，不支持范围查询</p>\\n</li>\\n<li>\\n<p>hash冲突问题</p>\\n<figure><img src=\\"https://img.jssjqd.cn/202306302113889.png\\" alt=\\"image-20230630211334131\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20230630211334131</figcaption></figure>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
