const e=JSON.parse('{"key":"v-1409d238","path":"/pages/a3d702/","title":"ForkJoin工作原理分析","lang":"zh-CN","frontmatter":{"title":"ForkJoin工作原理分析","date":"2022-12-01T23:18:48.000Z","permalink":"/pages/a3d702/","author":{"name":"江"},"category":["并发编程"],"description":"任务类型 思考： 线程池的线程数设置多少合适？ 我们调整线程池中的线程数量的最主要的目的是为了充分并合理地使用 CPU 和内存等资源，从而最大限度地提高程序的性能。在实际工作中，我们需要根据任务类型的不同选择对应的策略。 CPU密集型任务 CPU密集型任务也叫计算密集型任务，比如加密、解密、压缩、计算等一系列需要大量耗费 CPU 资源的任务。对于这样的任务最佳的线程数为 CPU 核心数的 1~2 倍，如果设置过多的线程数，实际上并不会起到很好的效果。此时假设我们设置的线程数量是 CPU 核心数的 2 倍以上，因为计算任务非常重，会占用大量的 CPU 资源，所以这时 CPU 的每个核心工作基本都是满负荷的，而我们又设置了过多的线程，每个线程都想去利用 CPU 资源来执行自己的任务，这就会造成不必要的上下文切换，此时线程数的增多并没有让性能提升，反而由于线程数量过多会导致性能下降。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/pages/a3d702/"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"ForkJoin工作原理分析"}],["meta",{"property":"og:description","content":"任务类型 思考： 线程池的线程数设置多少合适？ 我们调整线程池中的线程数量的最主要的目的是为了充分并合理地使用 CPU 和内存等资源，从而最大限度地提高程序的性能。在实际工作中，我们需要根据任务类型的不同选择对应的策略。 CPU密集型任务 CPU密集型任务也叫计算密集型任务，比如加密、解密、压缩、计算等一系列需要大量耗费 CPU 资源的任务。对于这样的任务最佳的线程数为 CPU 核心数的 1~2 倍，如果设置过多的线程数，实际上并不会起到很好的效果。此时假设我们设置的线程数量是 CPU 核心数的 2 倍以上，因为计算任务非常重，会占用大量的 CPU 资源，所以这时 CPU 的每个核心工作基本都是满负荷的，而我们又设置了过多的线程，每个线程都想去利用 CPU 资源来执行自己的任务，这就会造成不必要的上下文切换，此时线程数的增多并没有让性能提升，反而由于线程数量过多会导致性能下降。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-01T18:24:48.000Z"}],["meta",{"property":"article:author","content":"江"}],["meta",{"property":"article:published_time","content":"2022-12-01T23:18:48.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-01T18:24:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ForkJoin工作原理分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-01T23:18:48.000Z\\",\\"dateModified\\":\\"2023-08-01T18:24:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"江\\"}]}"]]},"headers":[{"level":2,"title":"任务类型","slug":"任务类型","link":"#任务类型","children":[{"level":3,"title":"CPU密集型任务","slug":"cpu密集型任务","link":"#cpu密集型任务","children":[]},{"level":3,"title":"IO密集型任务","slug":"io密集型任务","link":"#io密集型任务","children":[]}]},{"level":2,"title":"算法题","slug":"算法题","link":"#算法题","children":[{"level":3,"title":"分治算法","slug":"分治算法","link":"#分治算法","children":[]}]},{"level":2,"title":"Fork/Join框架介绍","slug":"fork-join框架介绍","link":"#fork-join框架介绍","children":[{"level":3,"title":"Fork/Join的使用","slug":"fork-join的使用","link":"#fork-join的使用","children":[]},{"level":3,"title":"ForkJoinPool 的工作原理","slug":"forkjoinpool-的工作原理","link":"#forkjoinpool-的工作原理","children":[]},{"level":3,"title":"ForkJoinPool执行流程","slug":"forkjoinpool执行流程","link":"#forkjoinpool执行流程","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1690914288000,"updatedTime":1690914288000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":13.63,"words":4090},"filePathRelative":"10.并发编程/100.ForkJoin工作原理分析.md","localizedDate":"2022年12月2日","excerpt":"<h2> 任务类型</h2>\\n<p><strong>思考： 线程池的线程数设置多少合适？</strong></p>\\n<p>我们调整线程池中的线程数量的最主要的目的是为了充分并合理地使用 CPU 和内存等资源，从而最大限度地提高程序的性能。在实际工作中，我们需要根据任务类型的不同选择对应的策略。</p>\\n<h3> CPU密集型任务</h3>\\n<p>CPU密集型任务也叫计算密集型任务，比如加密、解密、压缩、计算等一系列需要大量耗费 CPU 资源的任务。对于这样的任务最佳的线程数为 CPU 核心数的 1~2 倍，如果设置过多的线程数，实际上并不会起到很好的效果。此时假设我们设置的线程数量是 CPU 核心数的 2 倍以上，因为计算任务非常重，会占用大量的 CPU 资源，所以这时 CPU 的每个核心工作基本都是满负荷的，而我们又设置了过多的线程，每个线程都想去利用 CPU 资源来执行自己的任务，这就会造成不必要的上下文切换，此时线程数的增多并没有让性能提升，反而由于线程数量过多会导致性能下降。</p>","autoDesc":true}');export{e as data};
