import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,f as t}from"./app-c8395efa.js";const n={},s=t('<h2 id="mysql的逻辑架构" tabindex="-1"><a class="header-anchor" href="#mysql的逻辑架构" aria-hidden="true">#</a> MySQL的逻辑架构</h2><p>了解MySQL各组件之间协同工作的架构有助于深入理解MySQL服务器。</p><figure><img src="https://img.jssjqd.cn/202306292326232.png" alt="image-20230629232623484" tabindex="0" loading="lazy"><figcaption>image-20230629232623484</figcaption></figure><p><strong>第一层</strong>的客户端所包含的服务并不是MySQL独有的，大多数基于网络的客户端/服务器工具或服务器都有类似的服务，包括连接处理、身份验证、确保安全性等。</p><p><strong>第二层</strong>是比较有意思的部分。大多数MySQL的核心功能都在这一层，包括查询解析、分析、优化、以及所有的内置函数（例如，日期、时间、数学和加密函数），所有跨存储引擎的功能也都在这一层实现：存储过程、触发器、视图等。</p><p><strong>第三层</strong>是存储引擎层。存储引擎负责MySQL中数据的存储和提取。和GNU/Linux下的各种文件系统一样，每种存储引擎都有其优势和劣势。服务器通过存储引擎API进行通信。这些API屏蔽了不同存储引擎之间的差异，使得它们对上面的查询层基本上是透明的。存储引擎层还包含几十个底层函数，用于执行诸如“开始一个事务”或者“根据主键提取一行记录”等操作。但存储引擎不会去解析SQL（InnoDB除外，它会解析外键定义，因为MySQL服务端没有实现该功能），不同存储引擎之间也不会相互通信，而只是简单地响应服务器的请求。</p><h2 id="连接管理与安全性" tabindex="-1"><a class="header-anchor" href="#连接管理与安全性" aria-hidden="true">#</a> 连接管理与安全性</h2><p>默认情况下，每个客户端连接都会在服务器进程中拥有一个线程，该连接的查询只会在这个单独的线程中执行，该线程驻留在一个内核或者CPU上。服务器维护了一个缓存区，用于存放已就绪的线程，因此不需要为每个新的连接创建或者销毁线程。</p><p>当客户端（应用）连接到MySQL服务器时，服务器需要对其进行身份验证。身份验证基于用户名、发起的主机名和密码。如果以跨传输层安全(TLS)的方式连接，还可以使用X.509证书认证。客户端连接成功后，服务器会继续验证该客户端是否具有其发出的每个查询的权限（例如，是否允许客户端对world数据库中的Country表执行SELECT语句）。</p><h2 id="优化与执行" tabindex="-1"><a class="header-anchor" href="#优化与执行" aria-hidden="true">#</a> 优化与执行</h2><p>MySQL解析查询以创建内部数据结构（解析树），然后对其进行各种优化，包括重写查询、决定表的读取顺序，以及选择合适的索引等。用户可以通过特殊关键字向优化器传递提示，从而影响优化器的决策过程。也可以请求服务器解释优化过程的各个方面，使用户可以知道服务器是如何进行优化决策的，并提供一个参考点，便于用户重构查询和schema、修改相关配置，使应用尽可能高效地运行。我们将在第8章介绍更多关于优化器的细节。优化器并不关心表使用的是什么存储引擎，但存储引擎对于查询优化是有影响的。优化器会向存储引擎询问它的一些功能、某个具体操作的成本，以及表数据的统计信息。例如，一些存储引擎支持对某些查询有帮助的特定索引类型。更多关于索引与schema优化的内容，请参见第6章和第7章。</p><p>优化器并不关心表使用的是什么存储引擎，但存储引擎对于查询优化是有影响的。优化器会向存储引擎询问它的一些功能、某个具体操作的成本，以及表数据的统计信息。例如，一些存储引擎支持对某些查询有帮助的特定索引类型。更多关于索引与schema优化的内容，请参见第6章和第7章。</p><p>在旧版本中，MySQL可以使用内部查询缓存(query cache)来查看是否可以直接提供结果。但是，随着并发性的增加，查询缓存成为一个让人诟病的瓶颈。从MySQL 5.7.20版本开始，查询缓存已经被官方标注为被弃用的特性，并在8.0版本中被完全移除。尽管查询缓存不再是MySQL服务器的核心部分，但缓存被频繁请求的结果集依然是一个很好的实践。在本书的范围之外，一个流行的设计模式是在memcached或Redis中缓存数据。</p>',13),i=[s];function c(o,h){return a(),r("div",null,i)}const _=e(n,[["render",c],["__file","00.高性能MySQL-MySQL架构.html.vue"]]);export{_ as default};
