const t=JSON.parse('{"key":"v-380092e1","path":"/pages/20557c/","title":"Tomcat类加载机制&热加载和热部署实现","lang":"zh-CN","frontmatter":{"title":"Tomcat类加载机制&热加载和热部署实现","date":"2023-03-20T14:11:31.000Z","permalink":"/pages/20557c/","author":{"name":"江"},"category":["Tomcat"],"description":"Tomcat类加载机制 JVM类加载器 Java中有3个类加载器，另外你也可以自定义类加载器 BootstrapClassLoader 是启动类加载器，由 C 语言实现，用来加载 JVM 启动时所需要的核心类，比如rt.jar。 ExtClassLoader 是扩展类加载器，用来加载\\\\jre\\\\lib\\\\ext目录下 JAR 包。扩展加载器的 #getParent() 方法返回null，但实际上扩展类加载器的父类加载器就是启动类加载器。 AppClassLoader 是系统类加载器，用来加载 classpath 下的类，应用程序默认用它来加载类。程序可以通过 #getSystemClassLoader() 来获取系统类加载器。 自定义类加载器，用来加载自定义路径下的类。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/pages/20557c/"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"Tomcat类加载机制&热加载和热部署实现"}],["meta",{"property":"og:description","content":"Tomcat类加载机制 JVM类加载器 Java中有3个类加载器，另外你也可以自定义类加载器 BootstrapClassLoader 是启动类加载器，由 C 语言实现，用来加载 JVM 启动时所需要的核心类，比如rt.jar。 ExtClassLoader 是扩展类加载器，用来加载\\\\jre\\\\lib\\\\ext目录下 JAR 包。扩展加载器的 #getParent() 方法返回null，但实际上扩展类加载器的父类加载器就是启动类加载器。 AppClassLoader 是系统类加载器，用来加载 classpath 下的类，应用程序默认用它来加载类。程序可以通过 #getSystemClassLoader() 来获取系统类加载器。 自定义类加载器，用来加载自定义路径下的类。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-01T18:24:48.000Z"}],["meta",{"property":"article:author","content":"江"}],["meta",{"property":"article:published_time","content":"2023-03-20T14:11:31.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-01T18:24:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Tomcat类加载机制&热加载和热部署实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-20T14:11:31.000Z\\",\\"dateModified\\":\\"2023-08-01T18:24:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"江\\"}]}"]]},"headers":[{"level":3,"title":"Tomcat类加载机制","slug":"tomcat类加载机制","link":"#tomcat类加载机制","children":[]},{"level":3,"title":"Tomcat热加载和热部署","slug":"tomcat热加载和热部署","link":"#tomcat热加载和热部署","children":[]}],"git":{"createdTime":1690914288000,"updatedTime":1690914288000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":10.9,"words":3269},"filePathRelative":"20.性能调优/Tomcat/20.Tomcat类加载机制&热加载和热部署实现.md","localizedDate":"2023年3月20日","excerpt":"<h3> Tomcat类加载机制</h3>\\n<h4> JVM类加载器</h4>\\n<p>Java中有3个类加载器，另外你也可以自定义类加载器</p>\\n<ul>\\n<li>BootstrapClassLoader 是启动类加载器，由 C 语言实现，用来加载 JVM 启动时所需要的核心类，比如rt.jar。</li>\\n<li>ExtClassLoader 是扩展类加载器，用来加载\\\\jre\\\\lib\\\\ext目录下 JAR 包。扩展加载器的 #getParent() 方法返回null，但实际上扩展类加载器的父类加载器就是启动类加载器。</li>\\n<li>AppClassLoader 是系统类加载器，用来加载 classpath 下的类，应用程序默认用它来加载类。程序可以通过 #getSystemClassLoader() 来获取系统类加载器。</li>\\n<li>自定义类加载器，用来加载自定义路径下的类。</li>\\n</ul>","autoDesc":true}');export{t as data};
