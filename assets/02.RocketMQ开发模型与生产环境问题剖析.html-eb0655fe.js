const t=JSON.parse('{"key":"v-509bce68","path":"/30.%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6/05.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/02.RocketMQ/02.RocketMQ%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98%E5%89%96%E6%9E%90.html","title":"RocketMQ开发模型与生产环境问题剖析","lang":"zh-CN","frontmatter":{"title":"RocketMQ开发模型与生产环境问题剖析","date":"2023-05-06T01:54:45.000Z","description":"一、RocketMQ原生API使用 使用RocketMQ的原生API开发是最简单也是目前看来最牢靠的方式。这里我们用SpringBoot来搭建一系列消息生产者和消息消费者，来访问我们之前搭建的RocketMQ集群。 测试环境搭建 首先创建一个基于Maven的SpringBoot工程，引入如下依赖： &lt;dependency&gt; &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt; &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt; &lt;version&gt;4.9.1&lt;/version&gt; &lt;/dependency&gt;","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/30.%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6/05.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/02.RocketMQ/02.RocketMQ%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98%E5%89%96%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"RocketMQ开发模型与生产环境问题剖析"}],["meta",{"property":"og:description","content":"一、RocketMQ原生API使用 使用RocketMQ的原生API开发是最简单也是目前看来最牢靠的方式。这里我们用SpringBoot来搭建一系列消息生产者和消息消费者，来访问我们之前搭建的RocketMQ集群。 测试环境搭建 首先创建一个基于Maven的SpringBoot工程，引入如下依赖： &lt;dependency&gt; &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt; &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt; &lt;version&gt;4.9.1&lt;/version&gt; &lt;/dependency&gt;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-01T18:24:48.000Z"}],["meta",{"property":"article:author","content":"江"}],["meta",{"property":"article:published_time","content":"2023-05-06T01:54:45.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-01T18:24:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RocketMQ开发模型与生产环境问题剖析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-06T01:54:45.000Z\\",\\"dateModified\\":\\"2023-08-01T18:24:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"江\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"一、RocketMQ原生API使用","slug":"一、rocketmq原生api使用","link":"#一、rocketmq原生api使用","children":[{"level":3,"title":"测试环境搭建","slug":"测试环境搭建","link":"#测试环境搭建","children":[]},{"level":3,"title":"RocketMQ的编程模型","slug":"rocketmq的编程模型","link":"#rocketmq的编程模型","children":[]},{"level":3,"title":"RocketMQ的消息样例","slug":"rocketmq的消息样例","link":"#rocketmq的消息样例","children":[]}]},{"level":2,"title":"二、SpringBoot整合RocketMQ","slug":"二、springboot整合rocketmq","link":"#二、springboot整合rocketmq","children":[{"level":3,"title":"其他更多消息类型：","slug":"其他更多消息类型","link":"#其他更多消息类型","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"三、SpringCloudStream整合RocketMQ","slug":"三、springcloudstream整合rocketmq","link":"#三、springcloudstream整合rocketmq","children":[{"level":3,"title":"快速实战","slug":"快速实战","link":"#快速实战","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"四、RocketMQ使用中常见的问题","slug":"四、rocketmq使用中常见的问题","link":"#四、rocketmq使用中常见的问题","children":[{"level":3,"title":"使用RocketMQ如何保证消息不丢失？","slug":"使用rocketmq如何保证消息不丢失","link":"#使用rocketmq如何保证消息不丢失","children":[]},{"level":3,"title":"使用RocketMQ如何保证消息顺序","slug":"使用rocketmq如何保证消息顺序","link":"#使用rocketmq如何保证消息顺序","children":[]},{"level":3,"title":"使用RocketMQ如何快速处理积压消息？","slug":"使用rocketmq如何快速处理积压消息","link":"#使用rocketmq如何快速处理积压消息","children":[]},{"level":3,"title":"RocketMQ的消息轨迹","slug":"rocketmq的消息轨迹","link":"#rocketmq的消息轨迹","children":[]}]}],"git":{"createdTime":1690914288000,"updatedTime":1690914288000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":40.1,"words":12030},"filePathRelative":"30.分布式框架/05.消息队列/02.RocketMQ/02.RocketMQ开发模型与生产环境问题剖析.md","localizedDate":"2023年5月6日","excerpt":"<h2> 一、RocketMQ原生API使用</h2>\\n<p>使用RocketMQ的原生API开发是最简单也是目前看来最牢靠的方式。这里我们用SpringBoot来搭建一系列消息生产者和消息消费者，来访问我们之前搭建的RocketMQ集群。</p>\\n<h3> 测试环境搭建</h3>\\n<p>首先创建一个基于Maven的SpringBoot工程，引入如下依赖：</p>\\n<div class=\\"language-xml line-numbers-mode\\" data-ext=\\"xml\\"><pre class=\\"language-xml\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>org.apache.rocketmq<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>rocketmq-client<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>4.9.1<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
