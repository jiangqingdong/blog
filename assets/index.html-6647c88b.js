const e=JSON.parse('{"key":"v-da2d2c46","path":"/pages/2401735/","title":"Zookeeper客户端使用与经典应用场景","lang":"zh-CN","frontmatter":{"title":"Zookeeper客户端使用与经典应用场景","date":"2023-06-24T00:17:35.000Z","permalink":"/pages/2401735/","author":{"name":"江"},"category":["Zookeeper"],"description":"Zookeeper整合Java实战 ZooKeeper应用的开发主要通过Java客户端API去连接和操作ZooKeeper集群。可供选择的Java客户端API有： ZooKeeper官方的Java客户端API。 第三方的Java客户端API，比如Curator。 ZooKeeper官方的客户端API提供了基本的操作。例如，创建会话、创建节点、读取节点、更新数据、删除节点和检查节点是否存在等。不过，对于实际开发来说，ZooKeeper官方API有一些不足之处，具体如下： ZooKeeper的Watcher监测是一次性的，每次触发之后都需要重新进行注册。 会话超时之后没有实现重连机制。 异常处理烦琐，ZooKeeper提供了很多异常，对于开发人员来说可能根本不知道应该如何处理这些抛出的异常。 仅提供了简单的byte[]数组类型的接口，没有提供Java POJO级别的序列化数据处理接口。 创建节点时如果抛出异常，需要自行检查节点是否存在。 无法实现级联删除。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/pages/2401735/"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"Zookeeper客户端使用与经典应用场景"}],["meta",{"property":"og:description","content":"Zookeeper整合Java实战 ZooKeeper应用的开发主要通过Java客户端API去连接和操作ZooKeeper集群。可供选择的Java客户端API有： ZooKeeper官方的Java客户端API。 第三方的Java客户端API，比如Curator。 ZooKeeper官方的客户端API提供了基本的操作。例如，创建会话、创建节点、读取节点、更新数据、删除节点和检查节点是否存在等。不过，对于实际开发来说，ZooKeeper官方API有一些不足之处，具体如下： ZooKeeper的Watcher监测是一次性的，每次触发之后都需要重新进行注册。 会话超时之后没有实现重连机制。 异常处理烦琐，ZooKeeper提供了很多异常，对于开发人员来说可能根本不知道应该如何处理这些抛出的异常。 仅提供了简单的byte[]数组类型的接口，没有提供Java POJO级别的序列化数据处理接口。 创建节点时如果抛出异常，需要自行检查节点是否存在。 无法实现级联删除。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-01T18:24:48.000Z"}],["meta",{"property":"article:author","content":"江"}],["meta",{"property":"article:published_time","content":"2023-06-24T00:17:35.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-01T18:24:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Zookeeper客户端使用与经典应用场景\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-24T00:17:35.000Z\\",\\"dateModified\\":\\"2023-08-01T18:24:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"江\\"}]}"]]},"headers":[{"level":2,"title":"Zookeeper整合Java实战","slug":"zookeeper整合java实战","link":"#zookeeper整合java实战","children":[{"level":3,"title":"Zookeeper 原生Java客户端使用","slug":"zookeeper-原生java客户端使用","link":"#zookeeper-原生java客户端使用","children":[]},{"level":3,"title":"Curator开源客户端使用","slug":"curator开源客户端使用","link":"#curator开源客户端使用","children":[]}]}],"git":{"createdTime":1690914288000,"updatedTime":1690914288000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":10.75,"words":3225},"filePathRelative":"30.分布式框架/04.Zookeeper/10.Zookeeper客户端使用与经典应用场景.md","localizedDate":"2023年6月24日","excerpt":"<h2> Zookeeper整合Java实战</h2>\\n<p>ZooKeeper应用的开发主要通过Java客户端API去连接和操作ZooKeeper集群。可供选择的Java客户端API有：</p>\\n<ul>\\n<li>ZooKeeper官方的Java客户端API。</li>\\n<li>第三方的Java客户端API，比如Curator。</li>\\n</ul>\\n<p>ZooKeeper官方的客户端API提供了基本的操作。例如，创建会话、创建节点、读取节点、更新数据、删除节点和检查节点是否存在等。不过，对于实际开发来说，ZooKeeper官方API有一些不足之处，具体如下：</p>\\n<ul>\\n<li>ZooKeeper的Watcher监测是一次性的，每次触发之后都需要重新进行注册。</li>\\n<li>会话超时之后没有实现重连机制。</li>\\n<li>异常处理烦琐，ZooKeeper提供了很多异常，对于开发人员来说可能根本不知道应该如何处理这些抛出的异常。</li>\\n<li>仅提供了简单的byte[]数组类型的接口，没有提供Java POJO级别的序列化数据处理接口。</li>\\n<li>创建节点时如果抛出异常，需要自行检查节点是否存在。</li>\\n<li>无法实现级联删除。</li>\\n</ul>","autoDesc":true}');export{e as data};
