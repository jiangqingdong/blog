const e=JSON.parse('{"key":"v-63245ca0","path":"/pages/009873/","title":"MVCC与BufferPool缓存机制","lang":"zh-CN","frontmatter":{"title":"MVCC与BufferPool缓存机制","date":"2022-09-10T18:36:30.000Z","permalink":"/pages/009873/","author":{"name":"江"},"category":["MySQL"],"description":"MVCC多版本并发控制机制 Mysql在可重复读隔离级别下如何保证事务较高的隔离性，我们上节课给大家演示过，同样的sql查询语句在一个事务里多次执行查询结果相同，就算其它事务对数据有修改也不会影响当前事务sql语句的查询结果。 这个隔离性就是靠MVCC(Multi-Version Concurrency Control)机制来保证的，对一行数据的读和写两个操作默认是不会通过加锁互斥来保证隔离性，避免了频繁加锁互斥，而在串行化隔离级别为了保证较高的隔离性是通过将所有操作加锁互斥来实现的。 Mysql在读已提交和可重复读隔离级别下都实现了MVCC机制。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/pages/009873/"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"MVCC与BufferPool缓存机制"}],["meta",{"property":"og:description","content":"MVCC多版本并发控制机制 Mysql在可重复读隔离级别下如何保证事务较高的隔离性，我们上节课给大家演示过，同样的sql查询语句在一个事务里多次执行查询结果相同，就算其它事务对数据有修改也不会影响当前事务sql语句的查询结果。 这个隔离性就是靠MVCC(Multi-Version Concurrency Control)机制来保证的，对一行数据的读和写两个操作默认是不会通过加锁互斥来保证隔离性，避免了频繁加锁互斥，而在串行化隔离级别为了保证较高的隔离性是通过将所有操作加锁互斥来实现的。 Mysql在读已提交和可重复读隔离级别下都实现了MVCC机制。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-01T18:24:48.000Z"}],["meta",{"property":"article:author","content":"江"}],["meta",{"property":"article:published_time","content":"2022-09-10T18:36:30.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-01T18:24:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVCC与BufferPool缓存机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-10T18:36:30.000Z\\",\\"dateModified\\":\\"2023-08-01T18:24:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"江\\"}]}"]]},"headers":[{"level":3,"title":"MVCC多版本并发控制机制","slug":"mvcc多版本并发控制机制","link":"#mvcc多版本并发控制机制","children":[]},{"level":3,"title":"Innodb引擎SQL执行的BufferPool缓存机制","slug":"innodb引擎sql执行的bufferpool缓存机制","link":"#innodb引擎sql执行的bufferpool缓存机制","children":[]}],"git":{"createdTime":1690914288000,"updatedTime":1690914288000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":8.33,"words":2499},"filePathRelative":"20.性能调优/00.MySQL/07.MVCC与BufferPool缓存机制.md","localizedDate":"2022年9月11日","excerpt":"<h3> MVCC多版本并发控制机制</h3>\\n<p>Mysql在可重复读隔离级别下如何保证事务较高的隔离性，我们上节课给大家演示过，同样的sql查询语句在一个事务里多次执行查询结果相同，就算其它事务对数据有修改也不会影响当前事务sql语句的查询结果。</p>\\n<p>这个隔离性就是靠MVCC(<strong>Multi-Version Concurrency Control</strong>)机制来保证的，对一行数据的读和写两个操作默认是不会通过加锁互斥来保证隔离性，避免了频繁加锁互斥，而在串行化隔离级别为了保证较高的隔离性是通过将所有操作加锁互斥来实现的。</p>\\n<p>Mysql在读已提交和可重复读隔离级别下都实现了MVCC机制。</p>","autoDesc":true}');export{e as data};
