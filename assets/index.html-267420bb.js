import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c,a as s,b as n,e,f as t}from"./app-18640bff.js";const o={},u=t(`<p>ES版本： v7.17.3</p><h2 id="全文检索" tabindex="-1"><a class="header-anchor" href="#全文检索" aria-hidden="true">#</a> 全文检索</h2><p><strong>数据分类：</strong></p><ul><li>结构化数据： 固定格式，有限长度 比如mysql存的数据</li><li>非结构化数据：不定长，无固定格式 比如邮件，word文档，日志</li><li>半结构化数据： 前两者结合 比如xml，html</li></ul><p><strong>搜索分类：</strong></p><ul><li><p>结构化数据搜索： 使用关系型数据库</p></li><li><p>非结构化数据搜索</p></li><li><ul><li>顺序扫描</li><li>全文检索</li></ul></li></ul><p>设想一个关于搜索的场景，假设我们要搜索一首诗句内容中带“前”字的古诗</p><table><thead><tr><th>name</th><th>content</th><th>author</th></tr></thead><tbody><tr><td>静夜思</td><td>床前明月光,疑是地上霜。举头望明月，低头思故乡。</td><td>李白</td></tr><tr><td>望庐山瀑布</td><td>日照香炉生紫烟，遥看瀑布挂前川。飞流直下三千尺,疑是银河落九天。</td><td>李白</td></tr><tr><td>...</td><td>...</td><td>...</td></tr></tbody></table><p>思考：用传统关系型数据库和ES 实现会有什么差别？</p><p>如果用像 MySQL 这样的 RDBMS 来存储古诗的话，我们应该会去使用这样的 SQL 去查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">select</span> name <span class="token keyword">from</span> poems <span class="token keyword">where</span> content <span class="token operator">like</span> <span class="token string">&quot;%前%&quot;</span>              
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种我们称为顺序扫描法，需要遍历所有的记录进行匹配。不但效率低，而且不符合我们搜索时的期望，比如我们在搜索“ABCD&quot;这样的关键词时，通常还希望看到&quot;A&quot;,&quot;AB&quot;,&quot;CD&quot;,“ABC”的搜索结果。</p><h3 id="什么是全文检索" tabindex="-1"><a class="header-anchor" href="#什么是全文检索" aria-hidden="true">#</a> 什么是全文检索</h3><p>全文检索是指：</p><ul><li>通过一个程序扫描文本中的每一个单词，针对单词建立索引，并保存该单词在文本中的位置、以及出现的次数</li><li>用户查询时，通过之前建立好的索引来查询，将索引中单词对应的文本位置、出现的次数返回给用户，因为有了具体文本的位置，所以就可以将具体内容读取出来了</li></ul><figure><img src="https://img.jssjqd.cn/202212111606093.png" alt="image-20221211160621032" tabindex="0" loading="lazy"><figcaption>image-20221211160621032</figcaption></figure><p>搜索原理简单概括的话可以分为这么几步：</p><ul><li>内容爬取，停顿词过滤比如一些无用的像&quot;的&quot;，“了”之类的语气词/连接词</li><li>内容分词，提取关键词</li><li>根据关键词建立倒排索引</li><li>用户输入关键词进行搜索</li></ul><h3 id="倒排索引" tabindex="-1"><a class="header-anchor" href="#倒排索引" aria-hidden="true">#</a> 倒排索引</h3><p>索引就类似于目录，平时我们使用的都是索引，都是通过主键定位到某条数据，那么倒排索引呢，刚好相反，数据对应到主键。</p><figure><img src="https://img.jssjqd.cn/202212111610103.png" alt="image-20221211161013902" tabindex="0" loading="lazy"><figcaption>image-20221211161013902</figcaption></figure><p>这里以一个博客文章的内容为例:</p><p><strong>正排索引（正向索引）</strong></p><table><thead><tr><th>文章ID</th><th>文章标题</th><th>文章内容</th></tr></thead><tbody><tr><td>1</td><td>浅析JAVA设计模式</td><td>JAVA设计模式是每一个JAVA程序员都应该掌握的进阶知识</td></tr><tr><td>2</td><td>JAVA多线程设计模式</td><td>JAVA多线程与设计模式结合</td></tr></tbody></table><p><strong>倒排索引（反向索引）</strong></p><p>假如，我们有一个站内搜索的功能，通过某个关键词来搜索相关的文章，那么这个关键词可能出现在标题中，也可能出现在文章内容中，那我们将会在创建或修改文章的时候，建立一个关键词与文章的对应关系表，这种，我们可以称之为倒排索引。</p><table><thead><tr><th>关键词</th><th>文章ID</th></tr></thead><tbody><tr><td>JAVA</td><td>1,2</td></tr><tr><td>设计模式</td><td>1,2</td></tr><tr><td>多线程</td><td>2</td></tr></tbody></table><p>简单理解，正向索引是通过key找value，反向索引则是通过value找key。ES底层在检索时底层使用的就是倒排索引。</p><h2 id="elasticsearch简介" tabindex="-1"><a class="header-anchor" href="#elasticsearch简介" aria-hidden="true">#</a> ElasticSearch简介</h2><h3 id="elasticsearch是什么" tabindex="-1"><a class="header-anchor" href="#elasticsearch是什么" aria-hidden="true">#</a> ElasticSearch是什么</h3><p>ElasticSearch（简称ES）是一个分布式、RESTful 风格的搜索和数据分析引擎，是用Java开发并且是当前最流行的开源的企业级搜索引擎，能够达到近实时搜索，稳定，可靠，快速，安装使用方便。</p><p>客户端支持Java、.NET（C#）、PHP、Python、Ruby等多种语言。</p>`,32),r=s("strong",null,"官方网站:",-1),d={href:"https://www.elastic.co/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.elastic.co/cn/downloads/past-releases#elasticsearch",target:"_blank",rel:"noopener noreferrer"},v=s("p",null,"搜索引擎排名：",-1),g=s("figure",null,[s("img",{src:"https://img.jssjqd.cn/202212130317569.png",alt:"image-20221213031750797",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20221213031750797")],-1),k={href:"https://db-engines.com/en/ranking/search+engine",target:"_blank",rel:"noopener noreferrer"},b=t('<p><strong>起源——Lucene</strong></p><ul><li><p>基于Java语言开发的搜索引擎库类</p></li><li><p>创建于1999年，2005年成为Apache 顶级开源项目</p></li><li><p>Lucene具有高性能、易扩展的优点</p></li><li><p>Lucene的局限性︰</p></li><li><ul><li>只能基于Java语言开发</li><li>类库的接口学习曲线陡峭</li><li>原生并不支持水平扩展</li></ul></li></ul><p><strong>Elasticsearch的诞生</strong></p><p>Elasticsearch是构建在Apache Lucene之上的开源分布式搜索引擎。</p><ul><li><p>2004年 Shay Banon 基于Lucene开发了Compass</p></li><li><p>2010年 Shay Banon重写了Compass，取名Elasticsearch</p></li><li><ul><li>支持分布式，可水平扩展</li><li>降低全文检索的学习曲线，可以被任何编程语言调用</li></ul></li></ul><p>​ <img src="https://note.youdao.com/yws/public/resource/d5d5718ae542f274ba0fda4284a53231/xmlnote/A8F24FAED7834EFAAFFD94EFCF5A07A8/46329" alt="0" loading="lazy"></p><p>Elasticsearch 与 Lucene 核心库竞争的优势在于：</p><ul><li>完美封装了 Lucene 核心库，设计了友好的 Restful-API，开发者无需过多关注底层机制，直接开箱即用。</li><li>分片与副本机制，直接解决了集群下性能与高可用问题。</li></ul><p>ES Server进程 3节点 raft (奇数节点)</p><p>数据分片 -》lucene实例 分片和副本数 1个ES节点可以有多个lucene实例。也可以指定一个索引的多个分片</p><figure><img src="https://img.jssjqd.cn/202212111616311.png" alt="image-20221211161559774" tabindex="0" loading="lazy"><figcaption>image-20221211161559774</figcaption></figure><p><strong>ElasticSearch版本特性</strong></p><p>5.x新特性</p><ul><li><p>Lucene 6.x， 性能提升，默认打分机制从TF-IDF改为BM 25</p></li><li><p>支持Ingest节点/ Painless Scripting / Completion suggested支持/原生的Java REST客户端</p></li><li><p>Type标记成deprecated， 支持了Keyword的类型</p></li><li><p>性能优化</p><p>内部引擎移除了避免同一文档并发更新的竞争锁，带来15% - 20%的性能提升</p><p>Instant aggregation,支持分片，上聚合的缓存</p><p>新增了Profile API</p></li></ul><p>6.x新特性</p><ul><li><p>Lucene 7.x</p></li><li><p>新功能</p></li><li><ul><li>跨集群复制(CCR)</li><li>索引生命周期管理</li><li>SQL的支持</li></ul></li><li><p>更友好的的升级及数据迁移</p></li><li><ul><li>在主要版本之间的迁移更为简化，体验升级</li><li>全新的基于操作的数据复制框架，可加快恢复数据</li></ul></li><li><p>性能优化</p></li><li><ul><li>有效存储稀疏字段的新方法，降低了存储成本</li><li>在索引时进行排序，可加快排序的查询性能</li></ul></li></ul><p>7.x新特性</p><ul><li><p>Lucene 8.0</p></li><li><p>重大改进-正式废除单个索引下多Type的支持</p></li><li><p>7.1开始，Security 功能免费使用</p></li><li><p>ECK - Elasticseach Operator on Kubernetes</p></li><li><p>新功能</p></li><li><ul><li>New Cluster coordination</li><li>Feature——Complete High Level REST Client</li><li>Script Score Query</li></ul></li><li><p>性能优化</p></li><li><ul><li>默认的Primary Shard数从5改为1,避免Over Sharding</li><li>性能优化， 更快的Top K</li></ul></li></ul><p>8.x新特性</p>',19),q=s("li",null,"Rest API相比较7.x而言做了比较大的改动（比如彻底删除_type）",-1),h=s("li",null,"默认开启安全配置",-1),_=s("li",null,"存储空间优化：对倒排文件使用新的编码集，对于keyword、match_only_text、text类型字段有效，有3.5%的空间优化提升，对于新建索引和segment自动生效。",-1),f=s("li",null,"优化geo_point，geo_shape类型的索引（写入）效率：15%的提升。",-1),x=s("li",null,"技术预览版KNN API发布，（K邻近算法），跟推荐系统、自然语言排名相关。",-1),y={href:"https://www.elastic.co/guide/en/elastic-stack/current/elasticsearch-breaking-changes.html",target:"_blank",rel:"noopener noreferrer"},E=t(`<p><strong>ElasticSearch vs Solr</strong></p><p>Solr 是第一个基于 Lucene 核心库功能完备的搜索引擎产品，诞生远早于 Elasticsearch。</p><p>当单纯的对已有数据进行搜索时，Solr更快。当实时建立索引时, Solr会产生io阻塞，查询性能较差, Elasticsearch具有明显的优势。</p><figure><img src="https://img.jssjqd.cn/202212111617130.png" alt="image-20221211161742842" tabindex="0" loading="lazy"><figcaption>image-20221211161742842</figcaption></figure><p>​ <img src="https://note.youdao.com/yws/public/resource/d5d5718ae542f274ba0fda4284a53231/xmlnote/A1C3A7F3FBA943E89AADB69DA767EE4D/46439" alt="0" loading="lazy"></p><p>大型互联网公司，实际生产环境测试，将搜索引擎从Solr转到 Elasticsearch以后的平均查询速度有了50倍的提升。</p><figure><img src="https://img.jssjqd.cn/202212111617826.png" alt="image-20221211161751943" tabindex="0" loading="lazy"><figcaption>image-20221211161751943</figcaption></figure><p><strong>总结：</strong></p><ul><li>Solr 利用 Zookeeper 进行分布式管理，而Elasticsearch 自身带有分布式协调管理功能。</li><li>Solr 支持更多格式的数据，比如JSON、XML、CSV，而 Elasticsearch 仅支持json文件格式。</li><li>Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。</li><li>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch更适用于新兴的实时搜索应用。</li></ul><h3 id="elastic-stack介绍" tabindex="-1"><a class="header-anchor" href="#elastic-stack介绍" aria-hidden="true">#</a> Elastic Stack介绍</h3><p>在Elastic Stack之前我们听说过ELK，ELK分别是Elasticsearch，Logstash，Kibana这三款软件在一起的简称，在发展的过程中又有新的成员Beats的加入，就形成了Elastic Stack。</p><figure><img src="https://img.jssjqd.cn/202212111618501.png" alt="image-20221211161811486" tabindex="0" loading="lazy"><figcaption>image-20221211161811486</figcaption></figure><p>Elastic Stack生态圈</p><p>在Elastic Stack生态圈中Elasticsearch作为数据存储和搜索，是生态圈的基石，Kibana在上层提供用户一个可视化及操作的界面，Logstash和Beat可以对数据进行收集。在上图的右侧X-Pack部分则是Elastic公司提供的商业项目。</p><p>指标分析/日志分析：</p><figure><img src="https://img.jssjqd.cn/202212111618794.png" alt="image-20221211161825292" tabindex="0" loading="lazy"><figcaption>image-20221211161825292</figcaption></figure><h3 id="elasticsearch应用场景" tabindex="-1"><a class="header-anchor" href="#elasticsearch应用场景" aria-hidden="true">#</a> ElasticSearch应用场景</h3><ul><li>站内搜索</li><li>日志管理与分析</li><li>大数据分析</li><li>应用性能监控</li><li>机器学习</li></ul><p>国内现在有大量的公司都在使用 Elasticsearch，包括携程、滴滴、今日头条、饿了么、360安全、小米、vivo等诸多知名公司。除了搜索之外，结合Kibana、Logstash、Beats，Elastic Stack还被广泛运用在大数据近实时分析领域，包括日志分析、指标监控、信息安全等多个领域。它可以帮助你探索海量结构化、非结构化数据，按需创建可视化报表，对监控数据设置报警阈值，甚至通过使用机器学习技术，自动识别异常状况。</p><p><strong>通用数据处理流程：</strong></p><figure><img src="https://img.jssjqd.cn/202212111625903.png" alt="image-20221211162513743" tabindex="0" loading="lazy"><figcaption>image-20221211162513743</figcaption></figure><h2 id="elasticsearch快速开始" tabindex="-1"><a class="header-anchor" href="#elasticsearch快速开始" aria-hidden="true">#</a> ElasticSearch快速开始</h2><h3 id="elasticsearch安装运行" tabindex="-1"><a class="header-anchor" href="#elasticsearch安装运行" aria-hidden="true">#</a> ElasticSearch安装运行</h3><p><strong>docker compose安装</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.1&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>7.17.7
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> elasticsearch
    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /source/elasticsearch/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data
      <span class="token punctuation">-</span> /source/elasticsearch/plugins<span class="token punctuation">:</span>/usr/share/elasticsearch/plugins
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> discovery.type=single<span class="token punctuation">-</span>node
      <span class="token punctuation">-</span> ES_JAVA_OPTS=<span class="token punctuation">-</span>Xms512m <span class="token punctuation">-</span>Xmx2048m
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 9200<span class="token punctuation">:</span><span class="token number">9200</span>
      <span class="token punctuation">-</span> 9300<span class="token punctuation">:</span><span class="token number">9300</span>
  <span class="token key atrule">kibana</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> kibana<span class="token punctuation">:</span>7.17.7
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kibana
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> alwaysq
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> elasticsearch <span class="token comment">#kibana在elasticsearch启动之后再启动</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">ELASTICSEARCH_HOSTS</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//elasticsearch<span class="token punctuation">:</span><span class="token number">9200</span> <span class="token comment">#设置访问elasticsearch的地址</span>
      <span class="token key atrule">I18N_LOCALE</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 5601<span class="token punctuation">:</span><span class="token number">5601</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>IK分词器安装</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 进入容器内部
docker exec -it elasticsearch /bin/bash

# 在线下载并安装
./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.17.7/elasticsearch-analysis-ik-7.17.7.zip

#退出
exit
#重启容器
docker restart elasticsearch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>环境准备</strong></p>`,28),S=s("li",null,[s("p",null,"运行Elasticsearch，需安装并配置JDK")],-1),j=s("li",null,[s("ul",null,[s("li",null,"设置$JAVA_HOME")])],-1),T={href:"https://www.elastic.co/support/matrix#matrix_jvm",target:"_blank",rel:"noopener noreferrer"},w=s("li",null,[s("ul",null,[s("li",null,"Elasticsearch 5需要Java 8以上的版本"),s("li",null,"Elasticsearch 从6.5开始支持Java 11"),s("li",null,"7.0开始，内置了Java环境")])],-1),P=s("li",null,[s("p",null,"ES比较耗内存，建议虚拟机4G或以上内存，jvm1g以上的内存分配")],-1),z=s("p",null,"可以参考es的环境文件elasticsearch-env.bat",-1),A=s("figure",null,[s("img",{src:"https://img.jssjqd.cn/202212111625079.png",alt:"image-20221211162551957",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20221211162551957")],-1),O=s("p",null,"ES的jdk环境生效的优先级配置ES_JAVA_HOME>JAVA_HOME>ES_HOME",-1),I=s("p",null,[s("strong",null,"下载并解压ElasticSearch")],-1),L={href:"https://www.elastic.co/cn/downloads/past-releases#elasticsearch",target:"_blank",rel:"noopener noreferrer"},D=t('<p>选择版本：7.17.3</p><figure><img src="https://img.jssjqd.cn//202304271404436.png" alt="image-20230427140407494" tabindex="0" loading="lazy"><figcaption>image-20230427140407494</figcaption></figure><p><strong>ElasticSearch文件目录结构</strong></p><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td>bin</td><td>脚本文件，包括启动elasticsearch，安装插件，运行统计数据等</td></tr><tr><td>config</td><td>配置文件目录，如elasticsearch配置、角色配置、jvm配置等。</td></tr><tr><td>jdk</td><td>java运行环境</td></tr><tr><td>data</td><td>默认的数据存放目录，包含节点、分片、索引、文档的所有数据，生产环境需要修改。</td></tr><tr><td>lib</td><td>elasticsearch依赖的Java类库</td></tr><tr><td>logs</td><td>默认的日志文件存储路径，生产环境需要修改。</td></tr><tr><td>modules</td><td>包含所有的Elasticsearch模块，如Cluster、Discovery、Indices等。</td></tr><tr><td>plugins</td><td>已安装插件目录</td></tr></tbody></table><p><strong>主配置文件elasticsearch.yml</strong></p>',5),J={href:"http://cluster.name",target:"_blank",rel:"noopener noreferrer"},C=s("p",null,"当前节点所属集群名称，多个节点如果要组成同一个集群，那么集群名称一定要配置成相同。默认值elasticsearch，生产环境建议根据ES集群的使用目的修改成合适的名字。",-1),U={href:"http://node.name",target:"_blank",rel:"noopener noreferrer"},K=t(`<p>当前节点名称，默认值当前节点部署所在机器的主机名，所以如果一台机器上要起多个ES节点的话，需要通过配置该属性明确指定不同的节点名称。</p><ul><li>path.data</li></ul><p>配置数据存储目录，比如索引数据等，默认值 $ES_HOME/data，生产环境下强烈建议部署到另外的安全目录，防止ES升级导致数据被误删除。</p><ul><li>path.logs</li></ul><p>配置日志存储目录，比如运行日志和集群健康信息等，默认值 $ES_HOME/logs，生产环境下强烈建议部署到另外的安全目录，防止ES升级导致数据被误删除。</p><ul><li>bootstrap.memory_lock</li></ul><p>配置ES启动时是否进行内存锁定检查，默认值true。</p><p>ES对于内存的需求比较大，一般生产环境建议配置大内存，如果内存不足，容易导致内存交换到磁盘，严重影响ES的性能。所以默认启动时进行相应大小内存的锁定，如果无法锁定则会启动失败。</p><p>非生产环境可能机器内存本身就很小，能够供给ES使用的就更小，如果该参数配置为true的话很可能导致无法锁定内存以致ES无法成功启动，此时可以修改为false。</p><ul><li>network.host</li></ul><p>配置能够访问当前节点的主机，默认值为当前节点所在机器的本机回环地址127.0.0.1 和[::1]，这就导致默认情况下只能通过当前节点所在主机访问当前节点。可以配置为 0.0.0.0 ，表示所有主机均可访问。</p><ul><li>http.port</li></ul><p>配置当前ES节点对外提供服务的http端口，默认值 9200</p><ul><li>discovery.seed_hosts</li></ul><p>配置参与集群节点发现过程的主机列表，说白一点就是集群中所有节点所在的主机列表，可以是具体的IP地址，也可以是可解析的域名。</p><ul><li>cluster.initial_master_nodes</li></ul><p>配置ES集群初始化时参与master选举的节点名称列表，必须与node.name配置的一致。ES集群首次构建完成后，应该将集群中所有节点的配置文件中的cluster.initial_master_nodes配置项移除，重启集群或者将新节点加入某个已存在的集群时切记不要设置该配置项。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#ES开启远程访问  </span>
<span class="token key attr-name">network.host</span><span class="token punctuation">:</span> <span class="token value attr-value">0.0.0.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改JVM配置</strong></p><p>修改config/jvm.options配置文件，调整jvm堆内存大小</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">vim</span> <span class="token value attr-value">jvm.options</span>
-Xms4g
-Xmx4g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置的建议</p>`,22),N=s("li",null,"Xms和Xms设置成—样",-1),G=s("li",null,"Xmx不要超过机器内存的50%",-1),B={href:"https://www.elastic.co/cn/blog/a-heap-of-trouble",target:"_blank",rel:"noopener noreferrer"},V=t(`<p><strong>启动ElasticSearch服务</strong></p><p><strong>Windows</strong></p><p><strong>直接运行elasticsearch.bat</strong></p><p><strong>Linux（centos7）</strong></p><p>ES不允许使用root账号启动服务，如果你当前账号是root，则需要创建一个专有账户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#非root用户</span>
bin/elasticsearch 

<span class="token comment"># -d 后台启动</span>
bin/elasticsearch <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img.jssjqd.cn/202212111657473.png" alt="image-20221211165722461" tabindex="0" loading="lazy"><figcaption>image-20221211165722461</figcaption></figure><p>注意：es默认不能用root用户启动，生产环境建议为elasticsearch创建用户。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#为elaticsearch创建用户并赋予相应权限</span>
adduser es
<span class="token function">passwd</span> es
<span class="token function">chown</span> <span class="token parameter variable">-R</span> es:es elasticsearch-17.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),R={href:"http://localhost:9200/",target:"_blank",rel:"noopener noreferrer"},F=t(`<figure><img src="https://img.jssjqd.cn/202212111741264.png" alt="image-20221211174106920" tabindex="0" loading="lazy"><figcaption>image-20221211174106920</figcaption></figure><p>如果ES服务启动异常，会有提示：</p><figure><img src="https://img.jssjqd.cn/202212111741591.png" alt="image-20221211174118481" tabindex="0" loading="lazy"><figcaption>image-20221211174118481</figcaption></figure><p><strong>启动ES服务常见错误解决方案</strong></p><p>[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</p><p>ES因为需要大量的创建索引文件，需要大量的打开系统的文件，所以我们需要解除linux系统当中打开文件最大数目的限制，不然ES启动就会抛错</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#切换到root用户</span>
<span class="token function">vim</span> /etc/security/limits.conf

末尾添加如下配置：
  *	    soft 	nofile 	<span class="token number">65536</span>
  *     hard 	nofile 	<span class="token number">65536</span>
  *     soft 	nproc 	<span class="token number">4096</span>
  *	    hard 	nproc 	<span class="token number">4096</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[2]: max number of threads [1024] for user [es] is too low, increase to at least [4096]</p><p>无法创建本地线程问题,用户最大可创建线程数太小</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/security/limits.d/20-nproc.conf

改为如下配置：
* soft nproc <span class="token number">4096</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[3]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p><p>最大虚拟内存太小,调大系统的虚拟内存</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/sysctl.conf
追加以下内容：
<span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">262144</span>
保存退出之后执行如下命令：
<span class="token function">sysctl</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[4]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</p><p>缺少默认配置，至少需要配置discovery.seed_hosts/discovery.seed_providers/cluster.initial_master_nodes中的一个参数.</p><ul><li>discovery.seed_hosts: 集群主机列表</li><li>discovery.seed_providers: 基于配置文件配置集群主机列表</li><li>cluster.initial_master_nodes: 启动时初始化的参与选主的node，生产环境必填</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> config/elasticsearch.yml
<span class="token comment">#添加配置</span>
discovery.seed_hosts: <span class="token punctuation">[</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">]</span>
cluster.initial_master_nodes: <span class="token punctuation">[</span><span class="token string">&quot;node-1&quot;</span><span class="token punctuation">]</span>

<span class="token comment">#或者  单节点（集群单节点）</span>
discovery.type: single-node
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端Kibana安装</strong></p><p>Kibana是一个开源分析和可视化平台，旨在与Elasticsearch协同工作。</p><p><strong>1）下载并解压缩Kibana</strong></p>`,20),M={href:"https://www.elastic.co/cn/downloads/past-releases#kibana",target:"_blank",rel:"noopener noreferrer"},H=t(`<p>选择版本：7.17.3</p><figure><img src="https://img.jssjqd.cn/202212111814314.png" alt="image-20221211181406069" tabindex="0" loading="lazy"><figcaption>image-20221211181406069</figcaption></figure><p><strong>2）修改Kibana.yml</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> config/kibana.yml

server.port: <span class="token number">5601</span>
server.host: <span class="token string">&quot;localhost&quot;</span>  <span class="token comment">#服务器ip</span>
elasticsearch.hosts: <span class="token punctuation">[</span><span class="token string">&quot;http://localhost:9200&quot;</span><span class="token punctuation">]</span>  <span class="token comment">#elasticsearch的访问地址</span>
i18n.locale: <span class="token string">&quot;zh-CN&quot;</span>   <span class="token comment">#Kibana汉化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3）运行Kibana</strong></p><p>注意：kibana也需要非root用户启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bin/kibana
<span class="token comment">#后台启动</span>
<span class="token function">nohup</span>  bin/kibana <span class="token operator">&amp;</span>

<span class="token comment">#查询kibana进程</span>
<span class="token function">netstat</span> <span class="token parameter variable">-tunlp</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">5601</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),X=s("strong",null,"访问Kibana:",-1),Q={href:"http://localhost:5601/",target:"_blank",rel:"noopener noreferrer"},$=s("strong",null,"http://localhost:5601/",-1),W=t(`<figure><img src="https://img.jssjqd.cn/202212111814155.png" alt="image-20221211181455946" tabindex="0" loading="lazy"><figcaption>image-20221211181455946</figcaption></figure><p><strong>cat API</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/_cat/allocation         <span class="token comment">#查看单节点的shard分配整体情况</span>
/_cat/shards          <span class="token comment">#查看各shard的详细情况</span>
/_cat/shards/<span class="token punctuation">{</span>index<span class="token punctuation">}</span>     <span class="token comment">#查看指定分片的详细情况</span>
/_cat/master          <span class="token comment">#查看master节点信息</span>
/_cat/nodes           <span class="token comment">#查看所有节点信息</span>
/_cat/indices         <span class="token comment">#查看集群中所有index的详细信息</span>
/_cat/indices/<span class="token punctuation">{</span>index<span class="token punctuation">}</span>      <span class="token comment">#查看集群中指定index的详细信息</span>
/_cat/segments        <span class="token comment">#查看各index的segment详细信息,包括segment名, 所属shard, 内存(磁盘)占用大小, 是否刷盘</span>
/_cat/segments/<span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token comment">#查看指定index的segment详细信息</span>
/_cat/count           <span class="token comment">#查看当前集群的doc数量</span>
/_cat/count/<span class="token punctuation">{</span>index<span class="token punctuation">}</span>   <span class="token comment">#查看指定索引的doc数量</span>
/_cat/recovery        <span class="token comment">#查看集群内每个shard的recovery过程.调整replica。</span>
/_cat/recovery/<span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token comment">#查看指定索引shard的recovery过程</span>
/_cat/health          <span class="token comment">#查看集群当前状态：红、黄、绿</span>
/_cat/pending_tasks   <span class="token comment">#查看当前集群的pending task</span>
/_cat/aliases         <span class="token comment">#查看集群中所有alias信息,路由配置等</span>
/_cat/aliases/<span class="token punctuation">{</span>alias<span class="token punctuation">}</span> <span class="token comment">#查看指定索引的alias信息</span>
/_cat/thread_pool     <span class="token comment">#查看集群各节点内部不同类型的threadpool的统计信息,</span>
/_cat/plugins         <span class="token comment">#查看集群各个节点上的plugin信息</span>
/_cat/fielddata       <span class="token comment">#查看当前集群各个节点的fielddata内存使用情况</span>
/_cat/fielddata/<span class="token punctuation">{</span>fields<span class="token punctuation">}</span>     <span class="token comment">#查看指定field的内存使用情况,里面传field属性对应的值</span>
/_cat/nodeattrs              <span class="token comment">#查看单节点的自定义属性</span>
/_cat/repositories           <span class="token comment">#输出集群中注册快照存储库</span>
/_cat/templates              <span class="token comment">#输出当前正在存在的模板信息     </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Elasticsearch安装分词插件</strong></p><p>Elasticsearch提供插件机制对系统进行扩展</p><p>以安装analysis-icu这个分词插件为例</p><p><strong>在线安装</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#查看已安装插件</span>
bin/elasticsearch-plugin list
<span class="token comment">#安装插件</span>
bin/elasticsearch-plugin <span class="token function">install</span> analysis-icu
<span class="token comment">#删除插件</span>
bin/elasticsearch-plugin remove analysis-icu   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：安装和删除完插件后，需要重启ES服务才能生效。</p><p>测试分词效果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST _analyze
<span class="token punctuation">{</span>
    <span class="token string">&quot;analyzer&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;icu_analyzer&quot;</span>,
    <span class="token string">&quot;text&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;中华人民共和国&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <img src="https://img.jssjqd.cn/202212111815196.png" alt="image-20221211181551941" loading="lazy"></p><p><strong>离线安装</strong></p><p>本地下载相应的插件，解压，然后手动上传到elasticsearch的plugins目录，然后重启ES实例就可以了。</p>`,14),Z={href:"https://github.com/medcl/elasticsearch-analysis-ik",target:"_blank",rel:"noopener noreferrer"},Y=t(`<p>测试分词效果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#ES的默认分词设置是standard，会单字拆分</span>
POST _analyze
<span class="token punctuation">{</span>
    <span class="token string">&quot;analyzer&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;standard&quot;</span>,
    <span class="token string">&quot;text&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;中华人民共和国&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">#ik_smart:会做最粗粒度的拆</span>
POST _analyze
<span class="token punctuation">{</span>
    <span class="token string">&quot;analyzer&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ik_smart&quot;</span>,
    <span class="token string">&quot;text&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;中华人民共和国&quot;</span>
 <span class="token punctuation">}</span>

<span class="token comment">#ik_max_word:会将文本做最细粒度的拆分</span>
POST _analyze
<span class="token punctuation">{</span>
    <span class="token string">&quot;analyzer&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;ik_max_word&quot;</span>,
    <span class="token string">&quot;text&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;中华人民共和国&quot;</span>
<span class="token punctuation">}</span>         
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建索引时可以指定IK分词器作为默认分词器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT /es_db
<span class="token punctuation">{</span>
    <span class="token string">&quot;settings&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;index&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;analysis.analyzer.default.type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ik_max_word&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <img src="https://img.jssjqd.cn/202212111816941.png" alt="image-20221211181631808" loading="lazy"></p><h3 id="elasticsearch基本概念" tabindex="-1"><a class="header-anchor" href="#elasticsearch基本概念" aria-hidden="true">#</a> ElasticSearch基本概念</h3><p><strong>关系型数据库 VS ElasticSearch</strong></p><ul><li><p>在7.0之前，一个 Index可以设置多个Types</p></li><li><p>目前Type已经被Deprecated，7.0开始，一个索引只能创建一个Type - “_doc”</p></li><li><p>传统关系型数据库和Elasticsearch的区别:</p></li><li><ul><li>Elasticsearch- Schemaless /相关性/高性能全文检索</li><li>RDMS —事务性/ Join</li></ul></li></ul><figure><img src="https://img.jssjqd.cn/202212111816812.png" alt="image-20221211181637831" tabindex="0" loading="lazy"><figcaption>image-20221211181637831</figcaption></figure><p><strong>索引（Index）</strong></p><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。</p><p>一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。</p><figure><img src="https://img.jssjqd.cn/202212111816510.png" alt="image-20221211181647104" tabindex="0" loading="lazy"><figcaption>image-20221211181647104</figcaption></figure><p><strong>文档（Document）</strong></p><ul><li><p>Elasticsearch是面向文档的，文档是所有可搜索数据的最小单位。</p></li><li><ul><li>日志文件中的日志项</li><li>一本电影的具体信息/一张唱片的详细信息</li><li>MP3播放器里的一首歌/一篇PDF文档中的具体内容</li></ul></li><li><p>文档会被序列化成JSON格式，保存在Elasticsearch中</p></li><li><ul><li>JSON对象由字段组成</li><li>每个字段都有对应的字段类型(字符串/数值/布尔/日期/二进制/范围类型)</li></ul></li><li><p>每个文档都有一个Unique ID</p></li><li><ul><li>可以自己指定ID或者通过Elasticsearch自动生成</li></ul></li><li><p>一篇文档包含了一系列字段，类似数据库表中的一条记录</p></li><li><p>JSON文档，格式灵活，不需要预先定义格式</p></li><li><ul><li>字段的类型可以指定或者通过Elasticsearch自动推算</li><li>支持数组/支持嵌套</li></ul></li></ul><p><strong>文档元数据</strong></p><figure><img src="https://img.jssjqd.cn/202212111817336.png" alt="image-20221211181657762" tabindex="0" loading="lazy"><figcaption>image-20221211181657762</figcaption></figure><p>元数据，用于标注文档的相关信息：</p><ul><li>_index：文档所属的索引名</li><li>_type：文档所属的类型名</li><li>_id：文档唯—ld</li><li>_source: 文档的原始Json数据</li><li>_version: 文档的版本号，修改删除操作_version都会自增1</li><li>_seq_no: 和_version一样，一旦数据发生更改，数据也一直是累计的。Shard级别严格递增，保证后写入的Doc的_seq_no大于先写入的Doc的_seq_no。</li><li>_primary_term: _primary_term主要是用来恢复数据时处理当多个文档的_seq_no一样时的冲突，避免Primary Shard上的写入被覆盖。每当Primary Shard发生重新分配时，比如重启，Primary选举等，_primary_term会递增1。</li></ul><h3 id="elasticsearch索引操作" tabindex="-1"><a class="header-anchor" href="#elasticsearch索引操作" aria-hidden="true">#</a> ElasticSearch索引操作</h3>`,20),ss={href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/index.html",target:"_blank",rel:"noopener noreferrer"},ns=t(`<p><strong>创建索引</strong></p><p>索引命名必须小写，不能以下划线开头</p><p>格式: PUT /索引名称</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#创建索引</span>
PUT /es_db

<span class="token comment">#创建索引时可以设置分片数和副本数</span>
PUT /es_db
<span class="token punctuation">{</span>
    <span class="token string">&quot;settings&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;number_of_shards&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">3</span>,
        <span class="token string">&quot;number_of_replicas&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">#修改索引配置</span>
PUT /es_db/_settings
<span class="token punctuation">{</span>
    <span class="token string">&quot;index&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;number_of_replicas&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img.jssjqd.cn/202212111817630.png" alt="image-20221211181736268" tabindex="0" loading="lazy"><figcaption>image-20221211181736268</figcaption></figure><p><strong>查询索引</strong></p><p>格式: GET /索引名称</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#查询索引</span>
GET /es_db

<span class="token comment">#es_db是否存在</span>
HEAD /es_db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img.jssjqd.cn/202212111818045.png" alt="image-20221211181801190" tabindex="0" loading="lazy"><figcaption>image-20221211181801190</figcaption></figure><p>​</p><p><strong>删除索引</strong></p><p>格式: DELETE /索引名称</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>DELETE /es_db		 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="elasticsearch文档操作" tabindex="-1"><a class="header-anchor" href="#elasticsearch文档操作" aria-hidden="true">#</a> ElasticSearch文档操作</h3><p>示例数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PUT /es_db
<span class="token punctuation">{</span>
    <span class="token string">&quot;settings&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;index&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;analysis.analyzer.default.type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ik_max_word&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

PUT /es_db/_doc/1
<span class="token punctuation">{</span>
<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;张三&quot;</span>,
<span class="token string">&quot;sex&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,
<span class="token string">&quot;age&quot;</span><span class="token builtin class-name">:</span> <span class="token number">25</span>,
<span class="token string">&quot;address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;广州天河公园&quot;</span>,
<span class="token string">&quot;remark&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;java developer&quot;</span>
<span class="token punctuation">}</span>
PUT /es_db/_doc/2
<span class="token punctuation">{</span>
<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;李四&quot;</span>,
<span class="token string">&quot;sex&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,
<span class="token string">&quot;age&quot;</span><span class="token builtin class-name">:</span> <span class="token number">28</span>,
<span class="token string">&quot;address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;广州荔湾大厦&quot;</span>,
<span class="token string">&quot;remark&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;java assistant&quot;</span>
<span class="token punctuation">}</span>

PUT /es_db/_doc/3
<span class="token punctuation">{</span>
<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;王五&quot;</span>,
<span class="token string">&quot;sex&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
<span class="token string">&quot;age&quot;</span><span class="token builtin class-name">:</span> <span class="token number">26</span>,
<span class="token string">&quot;address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;广州白云山公园&quot;</span>,
<span class="token string">&quot;remark&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;php developer&quot;</span>
<span class="token punctuation">}</span>

PUT /es_db/_doc/4
<span class="token punctuation">{</span>
<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;赵六&quot;</span>,
<span class="token string">&quot;sex&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
<span class="token string">&quot;age&quot;</span><span class="token builtin class-name">:</span> <span class="token number">22</span>,
<span class="token string">&quot;address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;长沙橘子洲&quot;</span>,
<span class="token string">&quot;remark&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;python assistant&quot;</span>
<span class="token punctuation">}</span>

PUT /es_db/_doc/5
<span class="token punctuation">{</span>
<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;张龙&quot;</span>,
<span class="token string">&quot;sex&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
<span class="token string">&quot;age&quot;</span><span class="token builtin class-name">:</span> <span class="token number">19</span>,
<span class="token string">&quot;address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;长沙麓谷企业广场&quot;</span>,
<span class="token string">&quot;remark&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;java architect assistant&quot;</span>
<span class="token punctuation">}</span>	
	
PUT /es_db/_doc/6
<span class="token punctuation">{</span>
<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;赵虎&quot;</span>,
<span class="token string">&quot;sex&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,
<span class="token string">&quot;age&quot;</span><span class="token builtin class-name">:</span> <span class="token number">32</span>,
<span class="token string">&quot;address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;长沙麓谷兴工国际产业园&quot;</span>,
<span class="token string">&quot;remark&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;java architect&quot;</span>
<span class="token punctuation">}</span>	  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加（索引）文档</strong></p><ul><li>格式: [PUT | POST] /索引名称/[_doc | _create ]/id</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建文档,指定id</span>
<span class="token comment"># 如果id不存在，创建新的文档，否则先删除现有文档，再创建新的文档，版本会增加</span>
PUT /es_db/_doc/1
<span class="token punctuation">{</span>
<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;张三&quot;</span>,
<span class="token string">&quot;sex&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,
<span class="token string">&quot;age&quot;</span><span class="token builtin class-name">:</span> <span class="token number">25</span>,
<span class="token string">&quot;address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;广州天河公园&quot;</span>,
<span class="token string">&quot;remark&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;java developer&quot;</span>
<span class="token punctuation">}</span>	

<span class="token comment">#创建文档，ES生成id</span>
POST /es_db/_doc
<span class="token punctuation">{</span>
<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;张三&quot;</span>,
<span class="token string">&quot;sex&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,
<span class="token string">&quot;age&quot;</span><span class="token builtin class-name">:</span> <span class="token number">25</span>,
<span class="token string">&quot;address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;广州天河公园&quot;</span>,
<span class="token string">&quot;remark&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;java developer&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img.jssjqd.cn/202212111818908.png" alt="image-20221211181856853" tabindex="0" loading="lazy"><figcaption>image-20221211181856853</figcaption></figure><p>注意:POST和PUT都能起到创建/更新的作用，PUT需要对一个具体的资源进行操作也就是要确定id才能进行更新/创建，而POST是可以针对整个资源集合进行操作的，如果不写id就由ES生成一个唯一id进行创建新文档，如果填了id那就针对这个id的文档进行创建/更新</p><figure><img src="https://img.jssjqd.cn/202212111820356.png" alt="image-20221211182005357" tabindex="0" loading="lazy"><figcaption>image-20221211182005357</figcaption></figure><p>Create -如果ID已经存在，会失败</p><figure><img src="https://img.jssjqd.cn/202212111820917.png" alt="image-20221211182013730" tabindex="0" loading="lazy"><figcaption>image-20221211182013730</figcaption></figure><p><strong>修改文档</strong></p><ul><li>全量更新，整个json都会替换，格式: [PUT | POST] /索引名称/_doc/id</li></ul><p>如果文档存在，现有文档会被删除，新的文档会被索引</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 全量更新，替换整个json</span>
PUT /es_db/_doc/1/
<span class="token punctuation">{</span>
<span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;张三&quot;</span>,
<span class="token string">&quot;sex&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,
<span class="token string">&quot;age&quot;</span><span class="token builtin class-name">:</span> <span class="token number">25</span>
<span class="token punctuation">}</span>

<span class="token comment">#查询文档</span>
GET /es_db/_doc/1 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img.jssjqd.cn/202212111820502.png" alt="image-20221211182038548" tabindex="0" loading="lazy"><figcaption>image-20221211182038548</figcaption></figure><ul><li>使用_update部分更新，格式: POST /索引名称/_update/id</li></ul><p>update不会删除原来的文档，而是实现真正的数据更新</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 部分更新：在原有文档上更新</span>
<span class="token comment"># Update -文档必须已经存在，更新只会对相应字段做增量修改</span>
POST /es_db/_update/1
<span class="token punctuation">{</span>
  <span class="token string">&quot;doc&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;age&quot;</span><span class="token builtin class-name">:</span> <span class="token number">28</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">#查询文档</span>
GET /es_db/_doc/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <img src="https://img.jssjqd.cn/202212112006926.png" alt="image-20221211200632538" loading="lazy"></p><ul><li>使用 _update_by_query 更新文档</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST /es_db/_update_by_query
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> 
    <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>,
  <span class="token string">&quot;script&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;source&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ctx._source.age = 30&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img.jssjqd.cn/202212112007946.png" alt="image-20221211200730849" tabindex="0" loading="lazy"><figcaption>image-20221211200730849</figcaption></figure><p><strong>并发场景下修改文档</strong></p><p>_seq_no和_primary_term是对_version的优化，7.X版本的ES默认使用这种方式控制版本，所以当在高并发环境下使用乐观锁机制修改文档时，要带上当前文档的_seq_no和_primary_term进行更新：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST /es_db/_doc/2?if_seq_no<span class="token operator">=</span><span class="token number">21</span><span class="token operator">&amp;</span><span class="token assign-left variable">if_primary_term</span><span class="token operator">=</span><span class="token number">6</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;李四xxx&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果版本号不对，会抛出版本冲突异常，如下图：</p><figure><img src="https://img.jssjqd.cn/202212112030830.png" alt="image-20221211203031269" tabindex="0" loading="lazy"><figcaption>image-20221211203031269</figcaption></figure><p><strong>查询文档</strong></p><ul><li>根据id查询文档，格式: GET /索引名称/_doc/id</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /es_db/_doc/1              
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>条件查询 _search，格式： /索引名称/_doc/_search</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询前10条文档</span>
GET /es_db/_doc/_search   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ES Search API提供了两种条件查询搜索方式：</p><ul><li>REST风格的请求URI，直接将参数带过去</li><li>封装到request body中，这种方式可以定义更加易读的JSON格式</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#通过URI搜索，使用“q”指定查询字符串，“query string syntax” KV键值对

#条件查询, 如要查询age等于28岁的 _search?q=*:***
GET /es_db/_doc/_search?q=age:28

#范围查询, 如要查询age在25至26岁之间的 _search?q=***[** TO **]  注意: TO 必须为大写
GET /es_db/_doc/_search?q=age[25 TO 26]

#查询年龄小于等于28岁的 :&lt;=
GET /es_db/_doc/_search?q=age:&lt;=28
#查询年龄大于28前的 :&gt;
GET /es_db/_doc/_search?q=age:&gt;28

#分页查询 from=*&amp;size=*
GET /es_db/_doc/_search?q=age[25 TO 26]&amp;from=0&amp;size=1

#对查询结果只输出某些字段 _source=字段,字段
GET /es_db/_doc/_search?_source=name,age

#对查询结果排序 sort=字段:desc/asc
GET /es_db/_doc/_search?sort=age:desc 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过请求体的搜索方式会在后面课程详细讲解（DSL）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /es_db/_search
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;广州白云&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除文档</strong></p><p>格式: DELETE /索引名称/_doc/id</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>DELETE /es_db/_doc/1              
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="elasticsearch文档批量操作" tabindex="-1"><a class="header-anchor" href="#elasticsearch文档批量操作" aria-hidden="true">#</a> ElasticSearch文档批量操作</h3><p>批量操作可以减少网络连接所产生的开销，提升性能</p><ul><li>支持在一次API调用中，对不同的索引进行操作</li><li>可以在URI中指定Index，也可以在请求的Payload中进行</li><li>操作中单条操作失败，并不会影响其他操作</li><li>返回结果包括了每一条操作执行的结果</li></ul><p><strong>批量写入</strong></p><p>批量对文档进行写操作是通过_bulk的API来实现的</p><ul><li><p>请求方式：POST</p></li><li><p>请求地址：_bulk</p></li><li><p>请求参数：通过_bulk操作文档，一般至少有两行参数(或偶数行参数)</p></li><li><ul><li>第一行参数为指定操作的类型及操作的对象(index,type和id)</li><li>第二行参数才是操作的数据</li></ul></li></ul><p>参数类似于：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span><span class="token string">&quot;actionName&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;indexName&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;typeName&quot;</span>,<span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;field1&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;value1&quot;</span>, <span class="token string">&quot;field2&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;value2&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>actionName：表示操作类型，主要有create,index,delete和update</li></ul><p><strong>批量创建文档create</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST _bulk
<span class="token punctuation">{</span><span class="token string">&quot;create&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;article&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;_doc&quot;</span>, <span class="token string">&quot;_id&quot;</span>:3<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span>:3,<span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;fox老师&quot;</span>,<span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;fox老师666&quot;</span>,<span class="token string">&quot;tags&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;面向对象&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;create_time&quot;</span>:1554015482530<span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;create&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;article&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;_doc&quot;</span>, <span class="token string">&quot;_id&quot;</span>:4<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span>:4,<span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;mark老师&quot;</span>,<span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;mark老师NB&quot;</span>,<span class="token string">&quot;tags&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;面向对象&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;create_time&quot;</span>:1554015482530<span class="token punctuation">}</span>      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>普通创建或全量替换index</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST _bulk
<span class="token punctuation">{</span><span class="token string">&quot;index&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;article&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;_doc&quot;</span>, <span class="token string">&quot;_id&quot;</span>:3<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span>:3,<span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;图灵徐庶老师&quot;</span>,<span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;图灵学院徐庶老师666&quot;</span>,<span class="token string">&quot;tags&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;面向对象&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;create_time&quot;</span>:1554015482530<span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;index&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;article&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;_doc&quot;</span>, <span class="token string">&quot;_id&quot;</span>:4<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span>:4,<span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;图灵诸葛老师&quot;</span>,<span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;图灵学院诸葛老师NB&quot;</span>,<span class="token string">&quot;tags&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;面向对象&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;create_time&quot;</span>:1554015482530<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果原文档不存在，则是创建</li><li>如果原文档存在，则是替换(全量修改原文档)</li></ul><p><strong>批量删除delete</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST _bulk
<span class="token punctuation">{</span><span class="token string">&quot;delete&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;article&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;_doc&quot;</span>, <span class="token string">&quot;_id&quot;</span>:3<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;delete&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;article&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;_doc&quot;</span>, <span class="token string">&quot;_id&quot;</span>:4<span class="token punctuation">}</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>批量修改update</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST _bulk
<span class="token punctuation">{</span><span class="token string">&quot;update&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;article&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;_doc&quot;</span>, <span class="token string">&quot;_id&quot;</span>:3<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;doc&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;ES大法必修内功&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;update&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;article&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;_doc&quot;</span>, <span class="token string">&quot;_id&quot;</span>:4<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;doc&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;create_time&quot;</span>:1554018421008<span class="token punctuation">}</span><span class="token punctuation">}</span>     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组合应用</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST _bulk
<span class="token punctuation">{</span><span class="token string">&quot;create&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;article&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;_doc&quot;</span>, <span class="token string">&quot;_id&quot;</span>:3<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span>:3,<span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;fox老师&quot;</span>,<span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;fox老师666&quot;</span>,<span class="token string">&quot;tags&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;面向对象&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;create_time&quot;</span>:1554015482530<span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;delete&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;article&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;_doc&quot;</span>, <span class="token string">&quot;_id&quot;</span>:3<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;update&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;article&quot;</span>, <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;_doc&quot;</span>, <span class="token string">&quot;_id&quot;</span>:4<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;doc&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;create_time&quot;</span>:1554018421008<span class="token punctuation">}</span><span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>批量读取</strong></p><p>es的批量查询可以使用mget和msearch两种。其中mget是需要我们知道它的id，可以指定不同的index，也可以指定返回值source。msearch可以通过字段查询来进行一个批量的查找。</p><p><strong>_mget</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#可以通过ID批量获取不同index和type的数据</span>
GET _mget
<span class="token punctuation">{</span>
<span class="token string">&quot;docs&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
<span class="token punctuation">{</span>
<span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;es_db&quot;</span>,
<span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>,
<span class="token punctuation">{</span>
<span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;article&quot;</span>,
<span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">4</span>
<span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">#可以通过ID批量获取es_db的数据</span>
GET /es_db/_mget
<span class="token punctuation">{</span>
<span class="token string">&quot;docs&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
<span class="token punctuation">{</span>
<span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>,
<span class="token punctuation">{</span>
<span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">4</span>
<span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">#简化后</span>
GET /es_db/_mget 
<span class="token punctuation">{</span>
 <span class="token string">&quot;ids&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span>,<span class="token string">&quot;2&quot;</span><span class="token punctuation">]</span>  
 <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img.jssjqd.cn/202212112053019.png" alt="image-20221211205347896" tabindex="0" loading="lazy"><figcaption>image-20221211205347896</figcaption></figure><p><strong>_msearch</strong></p><p>在_msearch中，请求格式和bulk类似。查询一条数据需要两个对象，第一个设置index和type，第二个设置查询语句。查询语句和search相同。如果只是查询一个index，我们可以在url中带上index，这样，如果查该index可以直接用空对象表示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /es_db/_msearch
<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;query&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token string">&quot;match_all&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token string">&quot;from&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>, <span class="token string">&quot;size&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;index&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;article&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;query&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token string">&quot;match_all&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img.jssjqd.cn/202212112054657.png" alt="image-20221211205411694" tabindex="0" loading="lazy"><figcaption>image-20221211205411694</figcaption></figure>`,83);function as(es,ts){const a=l("ExternalLinkIcon");return p(),c("div",null,[u,s("p",null,[r,n(),s("a",d,[n("https://www.elastic.co/"),e(a)])]),s("p",null,[n("**下载地址：**"),s("a",m,[n("https://www.elastic.co/cn/downloads/past-releases#elasticsearch"),e(a)])]),v,g,s("p",null,[n("参考网站："),s("a",k,[n("https://db-engines.com/en/ranking/search+engine"),e(a)])]),b,s("ul",null,[q,h,_,f,x,s("li",null,[s("a",y,[n("https://www.elastic.co/guide/en/elastic-stack/current/elasticsearch-breaking-changes.html"),e(a)])])]),E,s("ul",null,[S,j,s("li",null,[s("p",null,[n("各个版本对Java的依赖 "),s("a",T,[n("https://www.elastic.co/support/matrix#matrix_jvm"),e(a)])])]),w,P]),z,A,O,I,s("p",null,[n("下载地址： "),s("a",L,[n("https://www.elastic.co/cn/downloads/past-releases#elasticsearch"),e(a)])]),D,s("ul",null,[s("li",null,[s("a",J,[n("cluster.name"),e(a)])])]),C,s("ul",null,[s("li",null,[s("a",U,[n("node.name"),e(a)])])]),K,s("ul",null,[N,G,s("li",null,[n("不要超过30GB - "),s("a",B,[n("https://www.elastic.co/cn/blog/a-heap-of-trouble"),e(a)])])]),V,s("p",null,[n("运行"),s("a",R,[n("http://localhost:9200/"),e(a)])]),F,s("p",null,[n("下载地址："),s("a",M,[n("https://www.elastic.co/cn/downloads/past-releases#kibana"),e(a)])]),H,s("p",null,[X,n(),s("a",Q,[$,e(a)])]),W,s("p",null,[n("比如ik中文分词插件："),s("a",Z,[n("https://github.com/medcl/elasticsearch-analysis-ik"),e(a)])]),Y,s("p",null,[s("a",ss,[n("https://www.elastic.co/guide/en/elasticsearch/reference/7.17/index.html"),e(a)])]),ns])}const ps=i(o,[["render",as],["__file","index.html.vue"]]);export{ps as default};
