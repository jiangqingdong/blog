import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as a,e as t,f as p}from"./app-c8395efa.js";const r={},i=p('<p><strong>JDK体系结构</strong></p><hr><p>​ <img src="https://img.jssjqd.cn/note/20220915013659.png" alt="" loading="lazy"></p><p><strong>Java语言的跨平台特性</strong></p><hr><p>​ <img src="https://img.jssjqd.cn/note/20220915013719.png" alt="" loading="lazy"></p><p><strong>JVM整体结构及内存模型</strong></p><hr><p>​ <img src="https://img.jssjqd.cn/note/20220915013812.png" alt="" loading="lazy"></p><p>每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧用于存储<strong>局部变量表，操作数栈，动态链接，方法出口</strong>等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧再虚拟机栈中从入栈到出栈的过程。</p><p>局部变量表中存放了编译期可知的各种<strong>Java虚拟机基本数据类型（boolean、byte、char、short、int、float、long、double）,对象引用（reference类型</strong>，它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他此对象相关的位置）和returnAddress类型（真相了一条字节码指令的地址）。</p><p>方法区和堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的<strong>类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</strong></p><p><strong>补充一个问题：</strong></p><p><strong>在minor gc过程中对象挪动后，引用如何修改？</strong></p><p>对象在堆内部挪动的过程其实是复制，原有区域对象还在，一般不直接清理，JVM内部清理过程只是将对象分配指针移动到区域的头位置即可，比如扫描s0区域，扫到gcroot引用的非垃圾对象是将这些对象<strong>复制</strong>到s1或老年代，最后扫描完了将s0区域的对象分配指针移动到区域的起始位置即可，s0区域之前对象并不直接清理，当有新对象分配了，原有区域里的对象也就被清除了。</p><p>minor gc在根扫描过程中会记录所有被扫描到的对象引用(在年轻代这些引用很少，因为大部分都是垃圾对象不会扫描到)，如果引用的对象被复制到新地址了，最后会一并更新引用指向新地址。</p><p>这里面内部算法比较复杂，感兴趣可以参考R大的这篇文章：</p>',17),u={href:"https://www.zhihu.com/question/42181722/answer/145085437",target:"_blank",rel:"noopener noreferrer"},k={href:"https://hllvm-group.iteye.com/group/topic/39376#post-257329",target:"_blank",rel:"noopener noreferrer"},d=p(`<p><strong>二、JVM内存参数设置</strong></p><hr><p>​ <img src="https://img.jssjqd.cn/note/20220915013823.png" alt="" loading="lazy"></p><p>Spring Boot程序的JVM参数设置格式(Tomcat启动直接加在bin目录下catalina.sh文件里)：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java <span class="token operator">-</span><span class="token class-name">Xms2048M</span> <span class="token operator">-</span><span class="token class-name">Xmx2048M</span> <span class="token operator">-</span><span class="token class-name">Xmn1024M</span> <span class="token operator">-</span><span class="token class-name">Xss512K</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">MetaspaceSize</span><span class="token operator">=</span><span class="token number">256</span>M <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">MaxMetaspaceSize</span><span class="token operator">=</span><span class="token number">256</span>M <span class="token operator">-</span>jar microservice<span class="token operator">-</span>eureka<span class="token operator">-</span>server<span class="token punctuation">.</span>jar 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-<strong>Xss</strong>：每个线程的栈大小</p><p><strong>-Xms</strong>：设置堆的初始可用大小，默认物理内存的1/64</p><p>-<strong>Xmx</strong>：设置堆的最大可用大小，默认物理内存的1/4</p><p>-<strong>Xmn</strong>：新生代大小</p><p>-<strong>XX:NewRatio</strong>：默认2表示新生代占年老代的1/2，占整个堆内存的1/3。</p><p>-<strong>XX:SurvivorRatio</strong>：默认8表示一个survivor区占用1/8的Eden内存，即1/10的新生代内存。</p><p>关于元空间的JVM参数有两个：-XX:MetaspaceSize=N和 -XX:MaxMetaspaceSize=N</p><p><strong>-XX：MaxMetaspaceSize</strong>： 设置元空间最大值， 默认是-1， 即不限制， 或者说只受限于本地内存大小。</p><p><strong>-XX：MetaspaceSize</strong>： 指定元空间触发Fullgc的初始阈值(元空间无固定初始大小)， 以字节为单位，默认是21M左右，达到该值就会触发full gc进行类型卸载， 同时收集器会对该值进行调整： 如果释放了大量的空间， 就适当降低该值； 如果释放了很少的空间， 那么在不超过-XX：MaxMetaspaceSize（如果设置了的话） 的情况下， 适当提高该值。这个跟早期jdk版本的**-XX:PermSize**参数意思不一样，-<strong>XX:PermSize</strong>代表永久代的初始容量。</p><p>由于调整元空间的大小需要Full GC，这是非常昂贵的操作，如果应用在启动的时候发生大量Full GC，通常都是由于永久代或元空间发生了大小调整，基于这种情况，一般建议在JVM参数中将MetaspaceSize和MaxMetaspaceSize设置成一样的值，并设置得比初始值要大，对于8G物理内存的机器来说，一般我会将这两个值都设置为256M。</p><p><strong>StackOverflowError</strong>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// JVM设置  -Xss128k(默认1M)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackOverflowTest</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">redo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">redo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">redo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

运行结果：
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StackOverflowError</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span></span>StackOverflowTest</span><span class="token punctuation">.</span><span class="token function">redo</span><span class="token punctuation">(</span><span class="token class-name">StackOverflowTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span></span>StackOverflowTest</span><span class="token punctuation">.</span><span class="token function">redo</span><span class="token punctuation">(</span><span class="token class-name">StackOverflowTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>tuling<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span></span>StackOverflowTest</span><span class="token punctuation">.</span><span class="token function">redo</span><span class="token punctuation">(</span><span class="token class-name">StackOverflowTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结论：</strong></p><p>-Xss设置越小count值越小，说明一个线程栈里能分配的栈帧就越少，但是对JVM整体来说能开启的线程数会更多</p><p><strong>JVM内存参数大小该如何设置？</strong></p><p>JVM参数大小设置并没有固定标准，需要根据实际项目情况分析，给大家举个例子</p><p><strong>日均百万级订单交易系统如何设置JVM参数</strong></p><p>​ <img src="https://note.youdao.com/yws/public/resource/ad3d29fc27ff8bd44e9a2448d3e2706d/xmlnote/A9B29CFFCC0047898C261EE9443F25E3/94575" alt="0" loading="lazy"></p><p>**结论：**通过上面这些内容介绍，大家应该对JVM优化有些概念了，就是尽可能让对象都在新生代里分配和回收，尽量别让太多对象频繁进入老年代，避免频繁对老年代进行垃圾回收，同时给系统充足的内存大小，避免新生代频繁的进行垃圾回收。</p>`,24);function m(v,g){const s=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[n("a",u,[a("https://www.zhihu.com/question/42181722/answer/145085437"),t(s)])]),n("p",null,[n("a",k,[a("https://hllvm-group.iteye.com/group/topic/39376#post-257329"),t(s)])]),d])}const h=e(r,[["render",m],["__file","index.html.vue"]]);export{h as default};
