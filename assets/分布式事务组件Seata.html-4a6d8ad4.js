import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as n,b as s,e as t,f as e}from"./app-18640bff.js";const i={},r=n("p",null,"seata版本： v1.5.1",-1),u=n("p",null,"分布式事务常用方案： AT TCC 基于可靠消息最终一致性",-1),d=n("h2",{id:"分布式事务简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#分布式事务简介","aria-hidden":"true"},"#"),s(" 分布式事务简介")],-1),k={href:"https://www.processon.com/view/link/61cd52fb0e3e7441570801ab",target:"_blank",rel:"noopener noreferrer"},v=e(`<h3 id="本地事务" tabindex="-1"><a class="header-anchor" href="#本地事务" aria-hidden="true">#</a> 本地事务</h3><p>​ 大多数场景下，我们的应用都只需要操作单一的数据库，这种情况下的事务称之为本地事务(Local Transaction)。本地事务的ACID特性是数据库直接提供支持。本地事务应用架构如下所示：</p><p>​ <img src="https://img.jssjqd.cn//202305081713521.png" alt="image-20230508171339502" loading="lazy"></p><p>在JDBC编程中，我们通过java.sql.Connection对象来开启、关闭或者提交事务。代码如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Connection conn = ... //获取数据库连接
conn.setAutoCommit(false); //开启事务
try{
   //...执行增删改查sql
   conn.commit(); //提交事务
}catch (Exception e) {
  conn.rollback();//事务回滚
}finally{
   conn.close();//关闭链接
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分布式事务" tabindex="-1"><a class="header-anchor" href="#分布式事务" aria-hidden="true">#</a> 分布式事务</h3><p>在微服务架构中，完成某一个业务功能可能需要横跨多个服务，操作多个数据库。这就涉及到到了分布式事务，需要操作的资源位于多个资源服务器上，而应用需要保证对于多个资源服务器的数据操作，要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同资源服务器的数据一致性。</p><h4 id="典型的分布式事务应用场景" tabindex="-1"><a class="header-anchor" href="#典型的分布式事务应用场景" aria-hidden="true">#</a> 典型的分布式事务应用场景</h4><h5 id="跨库事务" tabindex="-1"><a class="header-anchor" href="#跨库事务" aria-hidden="true">#</a> 跨库事务</h5><p>跨库事务指的是，一个应用某个功能需要操作多个库，不同的库中存储不同的业务数据。下图演示了一个服务同时操作2个库的情况：</p><p>​ <img src="https://img.jssjqd.cn//202305081715944.png" alt="image-20230508171519681" loading="lazy"></p><h5 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表" aria-hidden="true">#</a> 分库分表</h5><p>通常一个库数据量比较大或者预期未来的数据量比较大，都会进行分库分表。如下图，将数据库B拆分成了2个库：</p><p>​ <img src="https://img.jssjqd.cn//202305081715512.png" alt="image-20230508171523198" loading="lazy"></p><p>对于分库分表的情况，一般开发人员都会使用一些数据库中间件来降低sql操作的复杂性。如，对于sql：insert into user(id,name) values (1,&quot;张三&quot;),(2,&quot;李四&quot;)。这条sql是操作单库的语法，单库情况下，可以保证事务的一致性。 但是由于现在进行了分库分表，开发人员希望将1号记录插入分库1，2号记录插入分库2。所以数据库中间件要将其改写为2条sql，分别插入两个不同的分库，此时要保证两个库要不都成功，要不都失败，因此基本上所有的数据库中间件都面临着分布式事务的问题。</p><h5 id="微服务架构" tabindex="-1"><a class="header-anchor" href="#微服务架构" aria-hidden="true">#</a> 微服务架构</h5><p>下图演示了一个3个服务之间彼此调用的微服务架构：</p><p>​ <img src="https://img.jssjqd.cn//202305081715094.png" alt="image-20230508171529046" loading="lazy"></p><p>Service A完成某个功能需要直接操作数据库，同时需要调用Service B和Service C，而Service B又同时操作了2个数据库，Service C也操作了一个库。需要保证这些跨服务调用对多个数据库的操作要么都成功，要么都失败，实际上这可能是最典型的分布式事务场景。</p><p>小结：上述讨论的分布式事务场景中，无一例外的都直接或者间接的操作了多个数据库。如何保证事务的ACID特性，对于分布式事务实现方案而言，是非常大的挑战。同时，分布式事务实现方案还必须要考虑性能的问题，如果为了严格保证ACID特性，导致性能严重下降，那么对于一些要求快速响应的业务，是无法接受的。</p><h3 id="两阶段提交协议-2pc" tabindex="-1"><a class="header-anchor" href="#两阶段提交协议-2pc" aria-hidden="true">#</a> 两阶段提交协议(2PC)</h3><p>两阶段提交（Two Phase Commit），就是将提交(commit)过程划分为2个阶段(Phase)：</p><p><strong>阶段1：</strong></p><p>TM通知各个RM准备提交它们的事务分支。如果RM判断自己进行的工作可以被提交，那就对工作内容进行持久化，再给TM肯定答复；要是发生了其他情况，那给TM的都是否定答复。</p><p>以mysql数据库为例，在第一阶段，事务管理器向所有涉及到的数据库服务器发出prepare&quot;准备提交&quot;请求，数据库收到请求后执行数据修改和日志记录等处理，处理完成后只是把事务的状态改成&quot;可以提交&quot;,然后把结果返回给事务管理器。</p><p><strong>阶段2</strong></p><p>TM根据阶段1各个RM prepare的结果，决定是提交还是回滚事务。如果所有的RM都prepare成功，那么TM通知所有的RM进行提交；如果有RM prepare失败的话，则TM通知所有RM回滚自己的事务分支。</p><p>​ 以mysql数据库为例，如果第一阶段中所有数据库都prepare成功，那么事务管理器向数据库服务器发出&quot;确认提交&quot;请求，数据库服务器把事务的&quot;可以提交&quot;状态改为&quot;提交完成&quot;状态，然后返回应答。如果在第一阶段内有任何一个数据库的操作发生了错误，或者事务管理器收不到某个数据库的回应，则认为事务失败，回撤所有数据库的事务。数据库服务器收不到第二阶段的确认提交请求，也会把&quot;可以提交&quot;的事务回撤。</p><p>​ <img src="https://img.jssjqd.cn//202305081715669.png" alt="image-20230508171534487" loading="lazy"></p><p>两阶段提交方案下全局事务的ACID特性，是依赖于RM的。一个全局事务内部包含了多个独立的事务分支，这一组事务分支要么都成功，要么都失败。各个事务分支的ACID特性共同构成了全局事务的ACID特性。也就是将单个事务分支支持的ACID特性提升一个层次到分布式事务的范畴。</p><p><strong>2PC存在的问题</strong></p><ul><li><strong>同步阻塞问题</strong></li></ul><p>2PC 中的参与者是阻塞的。在第一阶段收到请求后就会预先锁定资源，一直到 commit 后才会释放。</p><ul><li><strong>单点故障</strong></li></ul><p>由于协调者的重要性，一旦协调者TM发生故障，参与者RM会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。</p><ul><li><strong>数据不一致</strong></li></ul><p>若协调者第二阶段发送提交请求时崩溃，可能部分参与者收到commit请求提交了事务，而另一部分参与者未收到commit请求而放弃事务，从而造成数据不一致的问题。</p><h2 id="seata是什么" tabindex="-1"><a class="header-anchor" href="#seata是什么" aria-hidden="true">#</a> Seata是什么</h2><p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。AT模式是阿里首推的模式，阿里云上有商用版本的GTS（Global Transaction Service 全局事务服务）</p>`,39),m={href:"https://seata.io/zh-cn/index.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/seata/seata",target:"_blank",rel:"noopener noreferrer"},b=e('<p>seata版本：v1.5.1</p><h3 id="seata的三大角色" tabindex="-1"><a class="header-anchor" href="#seata的三大角色" aria-hidden="true">#</a> Seata的三大角色</h3><p>在 Seata 的架构中，一共有三个角色：</p><ul><li><strong>TC (Transaction Coordinator) - 事务协调者</strong></li></ul><p>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p><ul><li><strong>TM (Transaction Manager) - 事务管理器</strong></li></ul><p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p><ul><li><strong>RM (Resource Manager) - 资源管理器</strong></li></ul><p>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p><p>其中，TC 为单独部署的 Server 服务端，TM 和 RM 为嵌入到应用中的 Client 客户端。</p><p>在 Seata 中，一个分布式事务的生命周期如下：</p><ol><li>TM 请求 TC 开启一个全局事务。TC 会生成一个 XID 作为该全局事务的编号。XID会在微服务的调用链路中传播，保证将多个微服务的子事务关联在一起。</li><li>RM 请求 TC 将本地事务注册为全局事务的分支事务，通过全局事务的 XID 进行关联。</li><li>TM 请求 TC 告诉 XID 对应的全局事务是进行提交还是回滚。</li><li>TC 驱动 RM 们将 XID 对应的自己的本地事务进行提交还是回滚。</li></ol><p>​ <img src="https://img.jssjqd.cn//202305081715781.png" alt="image-20230508171540724" loading="lazy"></p><h2 id="seata快速开始" tabindex="-1"><a class="header-anchor" href="#seata快速开始" aria-hidden="true">#</a> Seata快速开始</h2><p>Seata分TC、TM和RM三个角色，TC（Server端）为单独服务端部署，TM和RM（Client端）由业务系统集成。</p><h3 id="seata-server-tc-环境搭建" tabindex="-1"><a class="header-anchor" href="#seata-server-tc-环境搭建" aria-hidden="true">#</a> Seata Server（TC）环境搭建</h3><p><strong>Server端存储模式（store.mode）支持三种：</strong></p><ul><li>file：单机模式，全局事务会话信息内存中读写并持久化本地文件root.data，性能较高</li><li>db：高可用模式，全局事务会话信息通过db共享，相应性能差些</li><li>redis：1.3及以上版本支持,性能较高,存在事务信息丢失风险,请提前配置适合当前场景的redis持久化配置</li></ul><p><strong>资源目录</strong>：</p>',19),h={href:"https://github.com/seata/seata/tree/v1.5.1/script",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,[n("p",null,"client"),n("ul",null,[n("li",null,"存放client端sql脚本，参数配置")])],-1),f=n("li",null,[n("p",null,"config-center"),n("ul",null,[n("li",null,"各个配置中心参数导入脚本，config.txt(包含server和client)为通用参数文件")])],-1),_=n("li",null,[n("p",null,"server"),n("ul",null,[n("li",null,"server端数据库脚本及各个容器配置")])],-1),S=n("p",null,[n("strong",null,"db存储模式+Nacos(注册&配置中心)方式部署")],-1),T=n("p",null,[n("strong",null,"步骤一：下载安装包")],-1),C={href:"https://github.com/seata/seata/releases",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,[s("​ "),n("img",{src:"https://img.jssjqd.cn//202305081715479.png",alt:"image-20230508171558249",loading:"lazy"})],-1),M=n("p",null,[n("strong",null,"步骤二：建表(db模式)")],-1),x={href:"https://github.com/seata/seata/tree/v1.5.1/script/server/db",target:"_blank",rel:"noopener noreferrer"},E=e(`<p>​ <img src="https://img.jssjqd.cn//202305081716166.png" alt="image-20230508171602370" loading="lazy"></p><p><strong>步骤三：配置Nacos注册中心</strong></p><p>注册中心可以说是微服务架构中的”通讯录“，它记录了服务和服务地址的映射关系。在分布式架构中，服务会注册到注册中心，当服务需要调用其它服务时，就到注册中心找到服务的地址，进行调用。比如Seata Client端(TM,RM)，发现Seata Server(TC)集群的地址,彼此通信。</p><p>注意：Seata的注册中心是作用于Seata自身的，和Spring Cloud的注册中心无关</p><p>​ <img src="https://img.jssjqd.cn//202305081716782.png" alt="image-20230508171605814" loading="lazy"></p><p>Seata支持哪些注册中心?</p><ol><li>eureka</li><li>consul</li><li>nacos</li><li>etcd</li><li>zookeeper</li><li>sofa</li><li>redis</li><li>file (直连)</li></ol><p><strong>配置将Seata Server注册到Nacos，修改conf/application.yml文件</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">registry</span><span class="token punctuation">:</span>
    <span class="token comment"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">application</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>server
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">group</span><span class="token punctuation">:</span> SEATA_GROUP
      <span class="token key atrule">namespace</span><span class="token punctuation">:</span>
      <span class="token key atrule">cluster</span><span class="token punctuation">:</span> default
      <span class="token key atrule">username</span><span class="token punctuation">:</span>
      <span class="token key atrule">password</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：请确保client与server的注册处于同一个namespace和group，不然会找不到服务。</p><p>​ <img src="https://img.jssjqd.cn//202305081716440.png" alt="image-20230508171632642" loading="lazy"></p><p>启动 Seata-Server 后，会发现Server端的服务出现在 Nacos 控制台中的注册中心列表中。</p><p><strong>步骤四：配置Nacos配置中心</strong></p><p>配置中心可以说是一个&quot;大货仓&quot;,内部放置着各种配置文件,你可以通过自己所需进行获取配置加载到对应的客户端。比如Seata Client端(TM,RM),Seata Server(TC),会去读取全局事务开关,事务会话存储模式等信息。</p><p>注意：Seata的配置中心是作用于Seata自身的，和Spring Cloud的配置中心无关</p><p>Seata支持哪些配置中心?</p><ol><li>nacos</li><li>consul</li><li>apollo</li><li>etcd</li><li>zookeeper</li><li>file (读本地文件, 包含conf、properties、yml配置文件的支持)</li></ol><p><strong>1）配置Nacos配置中心地址，修改conf/application.yml文件</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">seata</span><span class="token punctuation">:</span>
  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token comment"># support: nacos, consul, apollo, zk, etcd3</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 7e838c12<span class="token punctuation">-</span>8554<span class="token punctuation">-</span>4231<span class="token punctuation">-</span>82d5<span class="token punctuation">-</span>6d93573ddf32
      <span class="token key atrule">group</span><span class="token punctuation">:</span> SEATA_GROUP
      <span class="token key atrule">data-id</span><span class="token punctuation">:</span> seataServer.properties
     <span class="token key atrule">username</span><span class="token punctuation">:</span>
     <span class="token key atrule">password</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <img src="https://note.youdao.com/yws/public/resource/c480b9d259db401acff9fdd30a770d64/xmlnote/BEE32BE9E2064263B884D69EEA989021/53946" alt="0" loading="lazy"></p><p><strong>2）上传配置至Nacos配置中心</strong></p>`,21),w={href:"https://github.com/seata/seata/tree/v1.5.1/script/config-center",target:"_blank",rel:"noopener noreferrer"},N=e(`<p>a) 获取/seata/script/config-center/config.txt，修改为db存储模式，并修改mysql连接配置</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">store.mode</span><span class="token punctuation">=</span><span class="token value attr-value">db</span>
<span class="token key attr-name">store.lock.mode</span><span class="token punctuation">=</span><span class="token value attr-value">db</span>
<span class="token key attr-name">store.session.mode</span><span class="token punctuation">=</span><span class="token value attr-value">db</span>
<span class="token key attr-name">store.db.driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">store.db.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span>
<span class="token key attr-name">store.db.user</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">store.db.password</span><span class="token punctuation">=</span><span class="token value attr-value">root  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在store.mode=db，由于seata是通过jdbc的executeBatch来批量插入全局锁的，根据MySQL官网的说明，连接参数中的rewriteBatchedStatements为true时，在执行executeBatch，并且操作类型为insert时，jdbc驱动会把对应的SQL优化成<code>insert into () values (), ()</code>的形式来提升批量插入的性能。 根据实际的测试，该参数设置为true后，对应的批量插入性能为原来的10倍多，因此在数据源为MySQL时，建议把该参数设置为true。</p><figure><img src="https://img.jssjqd.cn//202305081720569.png" alt="image-20230508172037632" tabindex="0" loading="lazy"><figcaption>image-20230508172037632</figcaption></figure><p>b) 配置事务分组， 要与client配置的事务分组一致</p><ul><li>事务分组：seata的资源逻辑，可以按微服务的需要，在应用程序（客户端）对自行定义事务分组，每组取一个名字。</li><li>集群：seata-server服务端一个或多个节点组成的集群cluster。 应用程序（客户端）使用时需要指定事务逻辑分组与Seata服务端集群的映射关系。</li></ul><p>​ <img src="https://img.jssjqd.cn//202305081720351.png" alt="image-20230508172042501" loading="lazy"></p><p>事务分组如何找到后端Seata集群（TC）？</p><ol><li>首先应用程序（客户端）中配置了事务分组（GlobalTransactionScanner 构造方法的txServiceGroup参数）。若应用程序是SpringBoot则通过seata.tx-service-group 配置。</li><li>应用程序（客户端）会通过用户配置的配置中心去寻找service.vgroupMapping .[事务分组配置项]，取得配置项的值就是TC集群的名称。若应用程序是SpringBoot则通过seata.service.vgroup-mapping.事务分组名=集群名称 配置</li><li>拿到集群名称程序通过一定的前后缀+集群名称去构造服务名，各配置中心的服务名实现不同（前提是Seata-Server已经完成服务注册，且Seata-Server向注册中心报告cluster名与应用程序（客户端）配置的集群名称一致）</li><li>拿到服务名去相应的注册中心去拉取相应服务名的服务列表，获得后端真实的TC服务列表（即Seata-Server集群节点列表）</li></ol><p>c) 在nacos配置中心中新建配置，dataId为seataServer.properties，配置内容为上面修改后的config.txt中的配置信息</p><p>从v1.4.2版本开始，seata已支持从一个Nacos dataId中获取所有配置信息,你只需要额外添加一个dataId配置项。</p><p>​ <img src="https://img.jssjqd.cn//202305081720874.png" alt="image-20230508172046979" loading="lazy"></p><p>添加后查看：</p><figure><img src="https://img.jssjqd.cn//202305081720802.png" alt="image-20230508172050917" tabindex="0" loading="lazy"><figcaption>image-20230508172050917</figcaption></figure><p><strong>步骤五：启动Seata Server</strong></p><p>启动命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bin/seata-server.sh              
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ <img src="https://note.youdao.com/yws/public/resource/c480b9d259db401acff9fdd30a770d64/xmlnote/3F66707112A3482088AE3909878826CF/54044" alt="0" loading="lazy"></p>`,18),I={href:"http://localhost:7091/#/login",target:"_blank",rel:"noopener noreferrer"},A=e(`<figure><img src="https://img.jssjqd.cn//202305081721571.png" alt="image-20230508172122611" tabindex="0" loading="lazy"><figcaption>image-20230508172122611</figcaption></figure><p>在Nacos注册中心中可以查看到seata-server注册成功</p><p>​ <img src="https://img.jssjqd.cn//202305081721792.png" alt="image-20230508172126820" loading="lazy"></p><p>支持的启动参数</p><table><thead><tr><th>参数</th><th>全写</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>-h</td><td>--host</td><td>指定在注册中心注册的 IP</td><td>不指定时获取当前的 IP，外部访问部署在云环境和容器中的 server 建议指定</td></tr><tr><td>-p</td><td>--port</td><td>指定 server 启动的端口</td><td>默认为 8091</td></tr><tr><td>-m</td><td>--storeMode</td><td>事务日志存储方式</td><td>支持file,db,redis，默认为 file 注:redis需seata-server 1.3版本及以上</td></tr><tr><td>-n</td><td>--serverNode</td><td>用于指定seata-server节点ID</td><td>如 1,2,3..., 默认为 1</td></tr><tr><td>-e</td><td>--seataEnv</td><td>指定 seata-server 运行环境</td><td>如 dev, test 等, 服务启动时会使用 registry-dev.conf 这样的配置</td></tr></tbody></table><p>比如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>bin/seata-server.sh <span class="token parameter variable">-p</span> <span class="token number">8091</span> <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-m</span> db              
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="seata-client快速开始" tabindex="-1"><a class="header-anchor" href="#seata-client快速开始" aria-hidden="true">#</a> Seata Client快速开始</h3><p><strong>Spring Cloud Alibaba整合Seata AT模式实战</strong></p><p><strong>业务场景</strong></p><p>用户下单，整个业务逻辑由三个微服务构成：</p><ul><li>库存服务：对给定的商品扣除库存数量。</li><li>订单服务：根据采购需求创建订单。</li><li>帐户服务：从用户帐户中扣除余额。</li></ul><p>​ <img src="https://img.jssjqd.cn//202305081721382.png" alt="image-20230508172144585" loading="lazy"></p><p><strong>1) 环境准备</strong></p><ul><li>父pom指定微服务版本</li></ul><table><thead><tr><th>Spring Cloud Alibaba Version</th><th>Spring Cloud Version</th><th>Spring Boot Version</th><th>Seata Version</th></tr></thead><tbody><tr><td>2.2.8.RELEASE</td><td>Spring Cloud Hoxton.SR12</td><td>2.3.12.RELEASE</td><td>1.5.1</td></tr></tbody></table><ul><li>启动Seata Server(TC)端，Seata Server使用nacos作为配置中心和注册中心</li><li>启动nacos服务</li></ul><p><strong>2) 微服务导入seata依赖</strong></p><p>spring-cloud-starter-alibaba-seata内部集成了seata，并实现了xid传递</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- seata--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3)微服务对应数据库中添加undo_log表(仅AT模式)</strong></p>`,21),j={href:"https://github.com/seata/seata/blob/v1.5.1/script/client/at/db/mysql.sql",target:"_blank",rel:"noopener noreferrer"},O=e(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- for AT mode you must to init this sql for you business database. the seata server not need it.</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>undo_log<span class="token punctuation">\`</span></span>
<span class="token punctuation">(</span>
    <span class="token identifier"><span class="token punctuation">\`</span>branch_id<span class="token punctuation">\`</span></span>     <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;branch transaction id&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>xid<span class="token punctuation">\`</span></span>           <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;global transaction id&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>context<span class="token punctuation">\`</span></span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;undo_log context,such as serialization&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>rollback_info<span class="token punctuation">\`</span></span> <span class="token keyword">LONGBLOB</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;rollback info&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>log_status<span class="token punctuation">\`</span></span>    <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;0:normal status,1:defense status&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>log_created<span class="token punctuation">\`</span></span>   <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;create datetime&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>log_modified<span class="token punctuation">\`</span></span>  <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;modify datetime&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>ux_undo_log<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>xid<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>branch_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>
  <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">&#39;AT transaction mode undo table&#39;</span><span class="token punctuation">;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4) 微服务application.yml中添加seata配置</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">seata</span><span class="token punctuation">:</span>
  <span class="token key atrule">application-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>
  <span class="token comment"># seata 服务分组，要与服务端配置service.vgroup_mapping的后缀对应</span>
  <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> default_tx_group
  <span class="token key atrule">registry</span><span class="token punctuation">:</span>
    <span class="token comment"># 指定nacos作为注册中心</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">application</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>server
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">namespace</span><span class="token punctuation">:</span>
      <span class="token key atrule">group</span><span class="token punctuation">:</span> SEATA_GROUP

  <span class="token key atrule">config</span><span class="token punctuation">:</span>
    <span class="token comment"># 指定nacos作为配置中心</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 7e838c12<span class="token punctuation">-</span>8554<span class="token punctuation">-</span>4231<span class="token punctuation">-</span>82d5<span class="token punctuation">-</span>6d93573ddf32
      <span class="token key atrule">group</span><span class="token punctuation">:</span> SEATA_GROUP
      <span class="token key atrule">data-id</span><span class="token punctuation">:</span> seataServer.properties           
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：请确保client与server的注册中心和配置中心namespace和group一致</p><p><strong>5） 在全局事务发起者中添加@GlobalTransactional注解</strong></p><p>核心代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;createOrder&quot;</span><span class="token punctuation">,</span>rollbackFor<span class="token operator">=</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderVo</span> orderVo<span class="token punctuation">)</span><span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;=============用户下单=================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;当前 XID: {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RootContext</span><span class="token punctuation">.</span><span class="token function">getXID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 保存订单</span>
    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>orderVo<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setCommodityCode</span><span class="token punctuation">(</span>orderVo<span class="token punctuation">.</span><span class="token function">getCommodityCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>orderVo<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>orderVo<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">INIT</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Integer</span> saveOrderRecord <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;保存订单{}&quot;</span><span class="token punctuation">,</span> saveOrderRecord <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&quot;成功&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//扣减库存</span>
    storageFeignService<span class="token punctuation">.</span><span class="token function">deduct</span><span class="token punctuation">(</span>orderVo<span class="token punctuation">.</span><span class="token function">getCommodityCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>orderVo<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//扣减余额</span>
    accountFeignService<span class="token punctuation">.</span><span class="token function">debit</span><span class="token punctuation">(</span>orderVo<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>orderVo<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//更新订单</span>
    <span class="token class-name">Integer</span> updateOrderRecord <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">updateOrderStatus</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;更新订单id:{} {}&quot;</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> updateOrderRecord <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&quot;成功&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> order<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6）测试分布式事务是否生效</strong></p><ul><li>分布式事务成功，模拟正常下单、扣库存，扣余额</li><li>分布式事务失败，模拟下单扣库存成功、扣余额失败，事务是否回滚</li></ul><p>​ ![<img src="https://img.jssjqd.cn//202305081723206.png" alt="image-20230508172327973" loading="lazy">C3D46904C24/54068)</p>`,10);function R(z,L){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,u,d,n("p",null,[s("分布式事务："),n("a",k,[s("https://www.processon.com/view/link/61cd52fb0e3e7441570801ab"),t(a)])]),v,n("p",null,[s("官网："),n("a",m,[s("https://seata.io/zh-cn/index.html"),t(a)])]),n("p",null,[s("源码: "),n("a",g,[s("https://github.com/seata/seata"),t(a)])]),b,n("ul",null,[n("li",null,[n("p",null,[n("a",h,[s("https://github.com/seata/seata/tree/v1.5.1/script"),t(a)])])]),y,f,_]),S,T,n("p",null,[n("a",C,[s("https://github.com/seata/seata/releases"),t(a)])]),q,M,n("p",null,[s("创建数据库seata，执行sql脚本，"),n("a",x,[s("https://github.com/seata/seata/tree/v1.5.1/script/server/db"),t(a)])]),E,n("p",null,[n("a",w,[s("https://github.com/seata/seata/tree/v1.5.1/script/config-center"),t(a)])]),N,n("p",null,[s("启动成功，查看控制台，账号密码都是seata。"),n("a",I,[s("http://localhost:7091/#/login"),t(a)])]),A,n("p",null,[n("a",j,[s("https://github.com/seata/seata/blob/v1.5.1/script/client/at/db/mysql.sql"),t(a)])]),O])}const V=p(i,[["render",R],["__file","分布式事务组件Seata.html.vue"]]);export{V as default};
