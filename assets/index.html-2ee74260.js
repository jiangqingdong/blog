const e=JSON.parse('{"key":"v-4e162e58","path":"/pages/9180142/","title":"MySQL锁机制与优化实践以及MVCC底层原理剖析","lang":"zh-CN","frontmatter":{"title":"MySQL锁机制与优化实践以及MVCC底层原理剖析","date":"2023-07-09T18:01:42.000Z","permalink":"/pages/9180142/","author":{"name":"江"},"category":["MySQL"],"description":"锁机制详解 锁是计算机协调多个进程或线程并发访问某一资源的机制。 在数据库中，除了传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供需要用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。 锁分类 从性能上分为乐观锁(用版本对比或CAS机制)和悲观锁，乐观锁适合读操作较多的场景，悲观锁适合写操作较多的场景，如果在写操作较多的场景使用乐观锁会导致比对次数过多，影响性能 从对数据操作的粒度分，分为表锁、页锁、行锁 从对数据库操作的类型分，分为读锁和写锁(都属于悲观锁)，还有意向锁","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/pages/9180142/"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"MySQL锁机制与优化实践以及MVCC底层原理剖析"}],["meta",{"property":"og:description","content":"锁机制详解 锁是计算机协调多个进程或线程并发访问某一资源的机制。 在数据库中，除了传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供需要用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。 锁分类 从性能上分为乐观锁(用版本对比或CAS机制)和悲观锁，乐观锁适合读操作较多的场景，悲观锁适合写操作较多的场景，如果在写操作较多的场景使用乐观锁会导致比对次数过多，影响性能 从对数据操作的粒度分，分为表锁、页锁、行锁 从对数据库操作的类型分，分为读锁和写锁(都属于悲观锁)，还有意向锁"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-01T18:24:48.000Z"}],["meta",{"property":"article:author","content":"江"}],["meta",{"property":"article:published_time","content":"2023-07-09T18:01:42.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-01T18:24:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL锁机制与优化实践以及MVCC底层原理剖析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-09T18:01:42.000Z\\",\\"dateModified\\":\\"2023-08-01T18:24:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"江\\"}]}"]]},"headers":[{"level":2,"title":"锁机制详解","slug":"锁机制详解","link":"#锁机制详解","children":[]},{"level":2,"title":"锁分类","slug":"锁分类","link":"#锁分类","children":[{"level":3,"title":"读锁（共享锁，S锁(Shared)）","slug":"读锁-共享锁-s锁-shared","link":"#读锁-共享锁-s锁-shared","children":[]},{"level":3,"title":"写锁（排它锁，X锁(eXclusive)）","slug":"写锁-排它锁-x锁-exclusive","link":"#写锁-排它锁-x锁-exclusive","children":[]},{"level":3,"title":"意向锁（Intention Lock）","slug":"意向锁-intention-lock","link":"#意向锁-intention-lock","children":[]},{"level":3,"title":"表锁","slug":"表锁","link":"#表锁","children":[]},{"level":3,"title":"页锁","slug":"页锁","link":"#页锁","children":[]},{"level":3,"title":"行锁","slug":"行锁","link":"#行锁","children":[]},{"level":3,"title":"间隙锁(Gap Lock)","slug":"间隙锁-gap-lock","link":"#间隙锁-gap-lock","children":[]},{"level":3,"title":"临键锁(Next-key Locks)","slug":"临键锁-next-key-locks","link":"#临键锁-next-key-locks","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"锁等待分析","slug":"锁等待分析","link":"#锁等待分析","children":[]},{"level":2,"title":"死锁问题分析","slug":"死锁问题分析","link":"#死锁问题分析","children":[]},{"level":2,"title":"锁优化实践","slug":"锁优化实践","link":"#锁优化实践","children":[]},{"level":2,"title":"MVCC多版本并发控制机制","slug":"mvcc多版本并发控制机制","link":"#mvcc多版本并发控制机制","children":[{"level":3,"title":"undo日志版本链与read view机制详解","slug":"undo日志版本链与read-view机制详解","link":"#undo日志版本链与read-view机制详解","children":[]},{"level":3,"title":"版本链比对规则","slug":"版本链比对规则","link":"#版本链比对规则","children":[]},{"level":3,"title":"MVC可见性算法的操作示例","slug":"mvc可见性算法的操作示例","link":"#mvc可见性算法的操作示例","children":[]},{"level":3,"title":"关于readview和可见性算法的原理解释","slug":"关于readview和可见性算法的原理解释","link":"#关于readview和可见性算法的原理解释","children":[]}]}],"git":{"createdTime":1690914288000,"updatedTime":1690914288000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":11.9,"words":3570},"filePathRelative":"20.性能调优/00.MySQL/07.MySQL锁机制与优化实践以及MVCC底层原理剖析.md","localizedDate":"2023年7月10日","excerpt":"<h2> 锁机制详解</h2>\\n<p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p>\\n<p>在数据库中，除了传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供需要用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。</p>\\n<h2> 锁分类</h2>\\n<ul>\\n<li>从性能上分为<strong>乐观锁</strong>(用版本对比或CAS机制)和<strong>悲观锁</strong>，乐观锁适合读操作较多的场景，悲观锁适合写操作较多的场景，如果在写操作较多的场景使用乐观锁会导致比对次数过多，影响性能</li>\\n<li>从对数据操作的粒度分，分为<strong>表锁、页锁、行锁</strong></li>\\n<li>从对数据库操作的类型分，分为<strong>读锁和写锁</strong>(都属于悲观锁)，还有<strong>意向锁</strong></li>\\n</ul>","autoDesc":true}');export{e as data};
