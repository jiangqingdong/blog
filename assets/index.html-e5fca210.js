const e=JSON.parse('{"key":"v-da2e23ca","path":"/pages/2401616/","title":"Zookeeper在分布式命名服务中的实践","lang":"zh-CN","frontmatter":{"title":"Zookeeper在分布式命名服务中的实践","date":"2023-06-24T00:16:16.000Z","permalink":"/pages/2401616/","author":{"name":"江"},"category":["Zookeeper"],"description":"命名服务是为系统中的资源提供标识能力。ZooKeeper的命名服务主要是利用ZooKeeper节点的树形分层结构和子节点的顺序维护能力，来为分布式系统中的资源命名。 哪些应用场景需要用到分布式命名服务呢？典型的有： 分布式API目录 分布式节点命名 分布式ID生成器 分布式API目录 为分布式系统中各种API接口服务的名称、链接地址，提供类似JNDI（Java命名和目录接口）中的文件系统的功能。借助于ZooKeeper的树形分层结构就能提供分布式的API调用功能。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/pages/2401616/"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"Zookeeper在分布式命名服务中的实践"}],["meta",{"property":"og:description","content":"命名服务是为系统中的资源提供标识能力。ZooKeeper的命名服务主要是利用ZooKeeper节点的树形分层结构和子节点的顺序维护能力，来为分布式系统中的资源命名。 哪些应用场景需要用到分布式命名服务呢？典型的有： 分布式API目录 分布式节点命名 分布式ID生成器 分布式API目录 为分布式系统中各种API接口服务的名称、链接地址，提供类似JNDI（Java命名和目录接口）中的文件系统的功能。借助于ZooKeeper的树形分层结构就能提供分布式的API调用功能。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-01T18:24:48.000Z"}],["meta",{"property":"article:author","content":"江"}],["meta",{"property":"article:published_time","content":"2023-06-24T00:16:16.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-01T18:24:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Zookeeper在分布式命名服务中的实践\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-24T00:16:16.000Z\\",\\"dateModified\\":\\"2023-08-01T18:24:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"江\\"}]}"]]},"headers":[{"level":2,"title":"分布式API目录","slug":"分布式api目录","link":"#分布式api目录","children":[]},{"level":2,"title":"分布式节点的命名","slug":"分布式节点的命名","link":"#分布式节点的命名","children":[]},{"level":2,"title":"分布式的ID生成器","slug":"分布式的id生成器","link":"#分布式的id生成器","children":[{"level":3,"title":"基于Zookeeper实现分布式ID生成器","slug":"基于zookeeper实现分布式id生成器","link":"#基于zookeeper实现分布式id生成器","children":[]},{"level":3,"title":"基于Zookeeper实现SnowFlakeID算法","slug":"基于zookeeper实现snowflakeid算法","link":"#基于zookeeper实现snowflakeid算法","children":[]}]}],"git":{"createdTime":1690914288000,"updatedTime":1690914288000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":7.74,"words":2323},"filePathRelative":"30.分布式框架/04.Zookeeper/11.Zookeeper在分布式命名服务中的实践.md","localizedDate":"2023年6月24日","excerpt":"<p>命名服务是为系统中的资源提供标识能力。ZooKeeper的命名服务主要是利用ZooKeeper节点的树形分层结构和子节点的顺序维护能力，来为分布式系统中的资源命名。</p>\\n<p>哪些应用场景需要用到分布式命名服务呢？典型的有：</p>\\n<ul>\\n<li>分布式API目录</li>\\n<li>分布式节点命名</li>\\n<li>分布式ID生成器</li>\\n</ul>\\n<h2> 分布式API目录</h2>\\n<p>为分布式系统中各种API接口服务的名称、链接地址，提供类似JNDI（Java命名和目录接口）中的文件系统的功能。借助于ZooKeeper的树形分层结构就能提供分布式的API调用功能。</p>","autoDesc":true}');export{e as data};
