const e=JSON.parse('{"key":"v-4e2f5265","path":"/pages/784fd7/","title":"装饰者模式","lang":"zh-CN","frontmatter":{"title":"装饰者模式","date":"2021-12-27T04:48:27.000Z","permalink":"/pages/784fd7/","author":{"name":"江"},"category":["设计模式"],"description":"前言 本文的主要内容： 介绍装饰者模式 示例 源码分析装饰者模式的典型应用 Java I/O 中的装饰者模式 spring session 中的装饰者模式 Mybatis 缓存中的装饰者模式 总结 装饰者模式 装饰者模式 (Decorator Pattern)：动态地给一个对象增加一些额外的职责，增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/pages/784fd7/"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"装饰者模式"}],["meta",{"property":"og:description","content":"前言 本文的主要内容： 介绍装饰者模式 示例 源码分析装饰者模式的典型应用 Java I/O 中的装饰者模式 spring session 中的装饰者模式 Mybatis 缓存中的装饰者模式 总结 装饰者模式 装饰者模式 (Decorator Pattern)：动态地给一个对象增加一些额外的职责，增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-24T11:27:53.000Z"}],["meta",{"property":"article:author","content":"江"}],["meta",{"property":"article:published_time","content":"2021-12-27T04:48:27.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-24T11:27:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"装饰者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-27T04:48:27.000Z\\",\\"dateModified\\":\\"2023-05-24T11:27:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"江\\"}]}"]]},"headers":[{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":3,"title":"装饰者模式","slug":"装饰者模式","link":"#装饰者模式","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"源码分析装饰者模式的典型应用","slug":"源码分析装饰者模式的典型应用","link":"#源码分析装饰者模式的典型应用","children":[]},{"level":3,"title":"装饰者模式总结","slug":"装饰者模式总结","link":"#装饰者模式总结","children":[]}],"git":{"createdTime":1684927673000,"updatedTime":1684927673000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":13.69,"words":4108},"filePathRelative":"设计模式/装饰者模式.md","localizedDate":"2021年12月27日","excerpt":"<h3> 前言</h3>\\n<p>本文的主要内容：</p>\\n<ul>\\n<li>\\n<p>介绍装饰者模式</p>\\n</li>\\n<li>\\n<p>示例</p>\\n</li>\\n<li>\\n<p>源码分析装饰者模式的典型应用</p>\\n</li>\\n<li>\\n<p>Java I/O 中的装饰者模式</p>\\n</li>\\n<li>\\n<p>spring session 中的装饰者模式</p>\\n</li>\\n<li>\\n<p>Mybatis 缓存中的装饰者模式</p>\\n</li>\\n<li>\\n<p>总结</p>\\n</li>\\n</ul>\\n<h3> 装饰者模式</h3>\\n<p><strong>装饰者模式 (Decorator Pattern)</strong>：动态地给一个对象增加一些额外的职责，增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。</p>","autoDesc":true}');export{e as data};
